{"version":3,"file":"js/501.94712908.js","mappings":"wLAGA,ICHA,MAAMA,EAAW,2BACXC,EAAW,CACf,KACA,KACA,KACA,KACA,MACA,QACA,UACA,MACA,MACA,WACA,KACA,SACA,OACA,OACA,QACA,QACA,aACA,OACA,QACA,OACA,UACA,MACA,SACA,WACA,SACA,SACA,MACA,QACA,QACA,QAIA,WACA,QACA,QACA,SACA,SACA,OACA,SACA,WAEIC,EAAW,CACf,OACA,QACA,OACA,YACA,MACA,YAIIC,EAAQ,CAEZ,SACA,WACA,UACA,SAEA,OACA,OACA,SACA,SAEA,SACA,SAEA,QACA,eACA,eACA,YACA,aACA,oBACA,aACA,aACA,cACA,cACA,gBACA,iBAEA,MACA,MACA,UACA,UAEA,cACA,oBACA,UACA,WACA,OAEA,UACA,YACA,oBACA,gBAEA,UACA,QAEA,OAEA,eAGIC,EAAc,CAClB,QACA,YACA,gBACA,aACA,iBACA,cACA,YACA,YAGIC,EAAmB,CACvB,cACA,aACA,gBACA,eAEA,UACA,UAEA,OACA,WACA,QACA,aACA,WACA,YACA,qBACA,YACA,qBACA,SACA,YAGIC,EAAqB,CACzB,YACA,OACA,QACA,UACA,SACA,WACA,eACA,iBACA,SACA,UAGIC,EAAY,GAAGC,OACnBH,EACAF,EACAC,GAWF,SAASK,EAAWC,GAClB,MAAMC,EAAQD,EAAKC,MAQbC,EAAgBA,CAACC,EAAKC,KAAgB,IAAd,MAAEC,GAAOD,EACrC,MAAME,EAAM,KAAOH,EAAM,GAAGI,MAAM,GAC5BC,EAAML,EAAMM,MAAMC,QAAQJ,EAAKD,GACrC,OAAgB,IAATG,CAAU,EAGbG,EAAarB,EACbsB,EAAW,CACfC,MAAO,KACPC,IAAK,OAGDC,EAAmB,4BACnBC,EAAU,CACdH,MAAO,sBACPC,IAAK,4BAKLG,kBAAmBA,CAACd,EAAOe,KACzB,MAAMC,EAAkBhB,EAAM,GAAGiB,OAASjB,EAAMkB,MAC1CC,EAAWnB,EAAMM,MAAMU,GAC7B,GAIe,MAAbG,GAGa,MAAbA,EAGA,YADAJ,EAASK,cAiBX,IAAIC,EAXa,MAAbF,IAGGpB,EAAcC,EAAO,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","sources":["webpack://my-website/./node_modules/highlight.js/es/core.js","webpack://my-website/./node_modules/highlight.js/es/languages/javascript.js","webpack://my-website/./src/pages/advance/html/build/webpack.jsx","webpack://my-website/./node_modules/highlight.js/lib/core.js"],"sourcesContent":["// https://nodejs.org/api/packages.html#packages_writing_dual_packages_while_avoiding_or_minimizing_hazards\nimport HighlightJS from '../lib/core.js';\nexport { HighlightJS };\nexport default HighlightJS;\n","const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\nconst KEYWORDS = [\n  \"as\", // for exports\n  \"in\",\n  \"of\",\n  \"if\",\n  \"for\",\n  \"while\",\n  \"finally\",\n  \"var\",\n  \"new\",\n  \"function\",\n  \"do\",\n  \"return\",\n  \"void\",\n  \"else\",\n  \"break\",\n  \"catch\",\n  \"instanceof\",\n  \"with\",\n  \"throw\",\n  \"case\",\n  \"default\",\n  \"try\",\n  \"switch\",\n  \"continue\",\n  \"typeof\",\n  \"delete\",\n  \"let\",\n  \"yield\",\n  \"const\",\n  \"class\",\n  // JS handles these with a special rule\n  // \"get\",\n  // \"set\",\n  \"debugger\",\n  \"async\",\n  \"await\",\n  \"static\",\n  \"import\",\n  \"from\",\n  \"export\",\n  \"extends\"\n];\nconst LITERALS = [\n  \"true\",\n  \"false\",\n  \"null\",\n  \"undefined\",\n  \"NaN\",\n  \"Infinity\"\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\nconst TYPES = [\n  // Fundamental objects\n  \"Object\",\n  \"Function\",\n  \"Boolean\",\n  \"Symbol\",\n  // numbers and dates\n  \"Math\",\n  \"Date\",\n  \"Number\",\n  \"BigInt\",\n  // text\n  \"String\",\n  \"RegExp\",\n  // Indexed collections\n  \"Array\",\n  \"Float32Array\",\n  \"Float64Array\",\n  \"Int8Array\",\n  \"Uint8Array\",\n  \"Uint8ClampedArray\",\n  \"Int16Array\",\n  \"Int32Array\",\n  \"Uint16Array\",\n  \"Uint32Array\",\n  \"BigInt64Array\",\n  \"BigUint64Array\",\n  // Keyed collections\n  \"Set\",\n  \"Map\",\n  \"WeakSet\",\n  \"WeakMap\",\n  // Structured data\n  \"ArrayBuffer\",\n  \"SharedArrayBuffer\",\n  \"Atomics\",\n  \"DataView\",\n  \"JSON\",\n  // Control abstraction objects\n  \"Promise\",\n  \"Generator\",\n  \"GeneratorFunction\",\n  \"AsyncFunction\",\n  // Reflection\n  \"Reflect\",\n  \"Proxy\",\n  // Internationalization\n  \"Intl\",\n  // WebAssembly\n  \"WebAssembly\"\n];\n\nconst ERROR_TYPES = [\n  \"Error\",\n  \"EvalError\",\n  \"InternalError\",\n  \"RangeError\",\n  \"ReferenceError\",\n  \"SyntaxError\",\n  \"TypeError\",\n  \"URIError\"\n];\n\nconst BUILT_IN_GLOBALS = [\n  \"setInterval\",\n  \"setTimeout\",\n  \"clearInterval\",\n  \"clearTimeout\",\n\n  \"require\",\n  \"exports\",\n\n  \"eval\",\n  \"isFinite\",\n  \"isNaN\",\n  \"parseFloat\",\n  \"parseInt\",\n  \"decodeURI\",\n  \"decodeURIComponent\",\n  \"encodeURI\",\n  \"encodeURIComponent\",\n  \"escape\",\n  \"unescape\"\n];\n\nconst BUILT_IN_VARIABLES = [\n  \"arguments\",\n  \"this\",\n  \"super\",\n  \"console\",\n  \"window\",\n  \"document\",\n  \"localStorage\",\n  \"sessionStorage\",\n  \"module\",\n  \"global\" // Node.js\n];\n\nconst BUILT_INS = [].concat(\n  BUILT_IN_GLOBALS,\n  TYPES,\n  ERROR_TYPES\n);\n\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting, web\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/\n\n/** @type LanguageFn */\nfunction javascript(hljs) {\n  const regex = hljs.regex;\n  /**\n   * Takes a string like \"<Booger\" and checks to see\n   * if we can find a matching \"</Booger\" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */\n  const hasClosingTag = (match, { after }) => {\n    const tag = \"</\" + match[0].slice(1);\n    const pos = match.input.indexOf(tag, after);\n    return pos !== -1;\n  };\n\n  const IDENT_RE$1 = IDENT_RE;\n  const FRAGMENT = {\n    begin: '<>',\n    end: '</>'\n  };\n  // to avoid some special cases inside isTrulyOpeningTag\n  const XML_SELF_CLOSING = /<[A-Za-z0-9\\\\._:-]+\\s*\\/>/;\n  const XML_TAG = {\n    begin: /<[A-Za-z0-9\\\\._:-]+/,\n    end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n    /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */\n    isTrulyOpeningTag: (match, response) => {\n      const afterMatchIndex = match[0].length + match.index;\n      const nextChar = match.input[afterMatchIndex];\n      if (\n        // HTML should not include another raw `<` inside a tag\n        // nested type?\n        // `<Array<Array<number>>`, etc.\n        nextChar === \"<\" ||\n        // the , gives away that this is not HTML\n        // `<T, A extends keyof T, V>`\n        nextChar === \",\"\n        ) {\n        response.ignoreMatch();\n        return;\n      }\n\n      // `<something>`\n      // Quite possibly a tag, lets look for a matching closing tag...\n      if (nextChar === \">\") {\n        // if we cannot find a matching closing tag, then we\n        // will ignore it\n        if (!hasClosingTag(match, { after: afterMatchIndex })) {\n          response.ignoreMatch();\n        }\n      }\n\n      // `<blah />` (self-closing)\n      // handled by simpleSelfClosing rule\n\n      let m;\n      const afterMatch = match.input.substring(afterMatchIndex);\n\n      // some more template typing stuff\n      //  <T = any>(key?: string) => Modify<\n      if ((m = afterMatch.match(/^\\s*=/))) {\n        response.ignoreMatch();\n        return;\n      }\n\n      // `<From extends string>`\n      // technically this could be HTML, but it smells like a type\n      // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276\n      if ((m = afterMatch.match(/^\\s+extends\\s+/))) {\n        if (m.index === 0) {\n          response.ignoreMatch();\n          // eslint-disable-next-line no-useless-return\n          return;\n        }\n      }\n    }\n  };\n  const KEYWORDS$1 = {\n    $pattern: IDENT_RE,\n    keyword: KEYWORDS,\n    literal: LITERALS,\n    built_in: BUILT_INS,\n    \"variable.language\": BUILT_IN_VARIABLES\n  };\n\n  // https://tc39.es/ecma262/#sec-literals-numeric-literals\n  const decimalDigits = '[0-9](_?[0-9])*';\n  const frac = `\\\\.(${decimalDigits})`;\n  // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\n  const NUMBER = {\n    className: 'number',\n    variants: [\n      // DecimalLiteral\n      { begin: `(\\\\b(${decimalInteger})((${frac})|\\\\.)?|(${frac}))` +\n        `[eE][+-]?(${decimalDigits})\\\\b` },\n      { begin: `\\\\b(${decimalInteger})\\\\b((${frac})\\\\b|\\\\.)?|(${frac})\\\\b` },\n\n      // DecimalBigIntegerLiteral\n      { begin: `\\\\b(0|[1-9](_?[0-9])*)n\\\\b` },\n\n      // NonDecimalIntegerLiteral\n      { begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\" },\n      { begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\" },\n      { begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\" },\n\n      // LegacyOctalIntegerLiteral (does not include underscore separators)\n      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n      { begin: \"\\\\b0[0-7]+n?\\\\b\" },\n    ],\n    relevance: 0\n  };\n\n  const SUBST = {\n    className: 'subst',\n    begin: '\\\\$\\\\{',\n    end: '\\\\}',\n    keywords: KEYWORDS$1,\n    contains: [] // defined later\n  };\n  const HTML_TEMPLATE = {\n    begin: 'html`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST\n      ],\n      subLanguage: 'xml'\n    }\n  };\n  const CSS_TEMPLATE = {\n    begin: 'css`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST\n      ],\n      subLanguage: 'css'\n    }\n  };\n  const GRAPHQL_TEMPLATE = {\n    begin: 'gql`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST\n      ],\n      subLanguage: 'graphql'\n    }\n  };\n  const TEMPLATE_STRING = {\n    className: 'string',\n    begin: '`',\n    end: '`',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      SUBST\n    ]\n  };\n  const JSDOC_COMMENT = hljs.COMMENT(\n    /\\/\\*\\*(?!\\/)/,\n    '\\\\*/',\n    {\n      relevance: 0,\n      contains: [\n        {\n          begin: '(?=@[A-Za-z]+)',\n          relevance: 0,\n          contains: [\n            {\n              className: 'doctag',\n              begin: '@[A-Za-z]+'\n            },\n            {\n              className: 'type',\n              begin: '\\\\{',\n              end: '\\\\}',\n              excludeEnd: true,\n              excludeBegin: true,\n              relevance: 0\n            },\n            {\n              className: 'variable',\n              begin: IDENT_RE$1 + '(?=\\\\s*(-)|$)',\n              endsParent: true,\n              relevance: 0\n            },\n            // eat spaces (not newlines) so we can find\n            // types or variables\n            {\n              begin: /(?=[^\\n])\\s/,\n              relevance: 0\n            }\n          ]\n        }\n      ]\n    }\n  );\n  const COMMENT = {\n    className: \"comment\",\n    variants: [\n      JSDOC_COMMENT,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.C_LINE_COMMENT_MODE\n    ]\n  };\n  const SUBST_INTERNALS = [\n    hljs.APOS_STRING_MODE,\n    hljs.QUOTE_STRING_MODE,\n    HTML_TEMPLATE,\n    CSS_TEMPLATE,\n    GRAPHQL_TEMPLATE,\n    TEMPLATE_STRING,\n    // Skip numbers when they are part of a variable name\n    { match: /\\$\\d+/ },\n    NUMBER,\n    // This is intentional:\n    // See https://github.com/highlightjs/highlight.js/issues/3288\n    // hljs.REGEXP_MODE\n  ];\n  SUBST.contains = SUBST_INTERNALS\n    .concat({\n      // we need to pair up {} inside our subst to prevent\n      // it from ending too early by matching another }\n      begin: /\\{/,\n      end: /\\}/,\n      keywords: KEYWORDS$1,\n      contains: [\n        \"self\"\n      ].concat(SUBST_INTERNALS)\n    });\n  const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\n    // eat recursive parens in sub expressions\n    {\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: KEYWORDS$1,\n      contains: [\"self\"].concat(SUBST_AND_COMMENTS)\n    }\n  ]);\n  const PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: KEYWORDS$1,\n    contains: PARAMS_CONTAINS\n  };\n\n  // ES6 classes\n  const CLASS_OR_EXTENDS = {\n    variants: [\n      // class Car extends vehicle\n      {\n        match: [\n          /class/,\n          /\\s+/,\n          IDENT_RE$1,\n          /\\s+/,\n          /extends/,\n          /\\s+/,\n          regex.concat(IDENT_RE$1, \"(\", regex.concat(/\\./, IDENT_RE$1), \")*\")\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.class\",\n          5: \"keyword\",\n          7: \"title.class.inherited\"\n        }\n      },\n      // class Car\n      {\n        match: [\n          /class/,\n          /\\s+/,\n          IDENT_RE$1\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.class\"\n        }\n      },\n\n    ]\n  };\n\n  const CLASS_REFERENCE = {\n    relevance: 0,\n    match:\n    regex.either(\n      // Hard coded exceptions\n      /\\bJSON/,\n      // Float32Array, OutT\n      /\\b[A-Z][a-z]+([A-Z][a-z]*|\\d)*/,\n      // CSSFactory, CSSFactoryT\n      /\\b[A-Z]{2,}([A-Z][a-z]+|\\d)+([A-Z][a-z]*)*/,\n      // FPs, FPsT\n      /\\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\\d)*([A-Z][a-z]*)*/,\n      // P\n      // single letters are not highlighted\n      // BLAH\n      // this will be flagged as a UPPER_CASE_CONSTANT instead\n    ),\n    className: \"title.class\",\n    keywords: {\n      _: [\n        // se we still get relevance credit for JS library classes\n        ...TYPES,\n        ...ERROR_TYPES\n      ]\n    }\n  };\n\n  const USE_STRICT = {\n    label: \"use_strict\",\n    className: 'meta',\n    relevance: 10,\n    begin: /^\\s*['\"]use (strict|asm)['\"]/\n  };\n\n  const FUNCTION_DEFINITION = {\n    variants: [\n      {\n        match: [\n          /function/,\n          /\\s+/,\n          IDENT_RE$1,\n          /(?=\\s*\\()/\n        ]\n      },\n      // anonymous function\n      {\n        match: [\n          /function/,\n          /\\s*(?=\\()/\n        ]\n      }\n    ],\n    className: {\n      1: \"keyword\",\n      3: \"title.function\"\n    },\n    label: \"func.def\",\n    contains: [ PARAMS ],\n    illegal: /%/\n  };\n\n  const UPPER_CASE_CONSTANT = {\n    relevance: 0,\n    match: /\\b[A-Z][A-Z_0-9]+\\b/,\n    className: \"variable.constant\"\n  };\n\n  function noneOf(list) {\n    return regex.concat(\"(?!\", list.join(\"|\"), \")\");\n  }\n\n  const FUNCTION_CALL = {\n    match: regex.concat(\n      /\\b/,\n      noneOf([\n        ...BUILT_IN_GLOBALS,\n        \"super\",\n        \"import\"\n      ]),\n      IDENT_RE$1, regex.lookahead(/\\(/)),\n    className: \"title.function\",\n    relevance: 0\n  };\n\n  const PROPERTY_ACCESS = {\n    begin: regex.concat(/\\./, regex.lookahead(\n      regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/)\n    )),\n    end: IDENT_RE$1,\n    excludeBegin: true,\n    keywords: \"prototype\",\n    className: \"property\",\n    relevance: 0\n  };\n\n  const GETTER_OR_SETTER = {\n    match: [\n      /get|set/,\n      /\\s+/,\n      IDENT_RE$1,\n      /(?=\\()/\n    ],\n    className: {\n      1: \"keyword\",\n      3: \"title.function\"\n    },\n    contains: [\n      { // eat to avoid empty params\n        begin: /\\(\\)/\n      },\n      PARAMS\n    ]\n  };\n\n  const FUNC_LEAD_IN_RE = '(\\\\(' +\n    '[^()]*(\\\\(' +\n    '[^()]*(\\\\(' +\n    '[^()]*' +\n    '\\\\)[^()]*)*' +\n    '\\\\)[^()]*)*' +\n    '\\\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\\\s*=>';\n\n  const FUNCTION_VARIABLE = {\n    match: [\n      /const|var|let/, /\\s+/,\n      IDENT_RE$1, /\\s*/,\n      /=\\s*/,\n      /(async\\s*)?/, // async is optional\n      regex.lookahead(FUNC_LEAD_IN_RE)\n    ],\n    keywords: \"async\",\n    className: {\n      1: \"keyword\",\n      3: \"title.function\"\n    },\n    contains: [\n      PARAMS\n    ]\n  };\n\n  return {\n    name: 'JavaScript',\n    aliases: ['js', 'jsx', 'mjs', 'cjs'],\n    keywords: KEYWORDS$1,\n    // this will be extended by TypeScript\n    exports: { PARAMS_CONTAINS, CLASS_REFERENCE },\n    illegal: /#(?![$_A-z])/,\n    contains: [\n      hljs.SHEBANG({\n        label: \"shebang\",\n        binary: \"node\",\n        relevance: 5\n      }),\n      USE_STRICT,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      HTML_TEMPLATE,\n      CSS_TEMPLATE,\n      GRAPHQL_TEMPLATE,\n      TEMPLATE_STRING,\n      COMMENT,\n      // Skip numbers when they are part of a variable name\n      { match: /\\$\\d+/ },\n      NUMBER,\n      CLASS_REFERENCE,\n      {\n        className: 'attr',\n        begin: IDENT_RE$1 + regex.lookahead(':'),\n        relevance: 0\n      },\n      FUNCTION_VARIABLE,\n      { // \"value\" container\n        begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n        keywords: 'return throw case',\n        relevance: 0,\n        contains: [\n          COMMENT,\n          hljs.REGEXP_MODE,\n          {\n            className: 'function',\n            // we have to count the parens to make sure we actually have the\n            // correct bounding ( ) before the =>.  There could be any number of\n            // sub-expressions inside also surrounded by parens.\n            begin: FUNC_LEAD_IN_RE,\n            returnBegin: true,\n            end: '\\\\s*=>',\n            contains: [\n              {\n                className: 'params',\n                variants: [\n                  {\n                    begin: hljs.UNDERSCORE_IDENT_RE,\n                    relevance: 0\n                  },\n                  {\n                    className: null,\n                    begin: /\\(\\s*\\)/,\n                    skip: true\n                  },\n                  {\n                    begin: /\\(/,\n                    end: /\\)/,\n                    excludeBegin: true,\n                    excludeEnd: true,\n                    keywords: KEYWORDS$1,\n                    contains: PARAMS_CONTAINS\n                  }\n                ]\n              }\n            ]\n          },\n          { // could be a comma delimited list of params to a function call\n            begin: /,/,\n            relevance: 0\n          },\n          {\n            match: /\\s+/,\n            relevance: 0\n          },\n          { // JSX\n            variants: [\n              { begin: FRAGMENT.begin, end: FRAGMENT.end },\n              { match: XML_SELF_CLOSING },\n              {\n                begin: XML_TAG.begin,\n                // we carefully check the opening tag to see if it truly\n                // is a tag and not a false positive\n                'on:begin': XML_TAG.isTrulyOpeningTag,\n                end: XML_TAG.end\n              }\n            ],\n            subLanguage: 'xml',\n            contains: [\n              {\n                begin: XML_TAG.begin,\n                end: XML_TAG.end,\n                skip: true,\n                contains: ['self']\n              }\n            ]\n          }\n        ],\n      },\n      FUNCTION_DEFINITION,\n      {\n        // prevent this from getting swallowed up by function\n        // since they appear \"function like\"\n        beginKeywords: \"while if switch catch for\"\n      },\n      {\n        // we have to count the parens to make sure we actually have the correct\n        // bounding ( ).  There could be any number of sub-expressions inside\n        // also surrounded by parens.\n        begin: '\\\\b(?!function)' + hljs.UNDERSCORE_IDENT_RE +\n          '\\\\(' + // first parens\n          '[^()]*(\\\\(' +\n            '[^()]*(\\\\(' +\n              '[^()]*' +\n            '\\\\)[^()]*)*' +\n          '\\\\)[^()]*)*' +\n          '\\\\)\\\\s*\\\\{', // end parens\n        returnBegin:true,\n        label: \"func.def\",\n        contains: [\n          PARAMS,\n          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: \"title.function\" })\n        ]\n      },\n      // catch ... so it won't trigger the property rule below\n      {\n        match: /\\.\\.\\./,\n        relevance: 0\n      },\n      PROPERTY_ACCESS,\n      // hack: prevents detection of keywords in some circumstances\n      // .keyword()\n      // $keyword = x\n      {\n        match: '\\\\$' + IDENT_RE$1,\n        relevance: 0\n      },\n      {\n        match: [ /\\bconstructor(?=\\s*\\()/ ],\n        className: { 1: \"title.function\" },\n        contains: [ PARAMS ]\n      },\n      FUNCTION_CALL,\n      UPPER_CASE_CONSTANT,\n      CLASS_OR_EXTENDS,\n      GETTER_OR_SETTER,\n      {\n        match: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n      }\n    ]\n  };\n}\n\nexport { javascript as default };\n","import \"../common/css/html.less\";\nimport hljs from \"highlight.js/lib/core\";\nimport javascript from \"highlight.js/lib/languages/javascript\";\nimport { onMounted } from \"vue\";\nimport { useRoute } from \"vue-router\";\n\nconst Build = {\n  setup() {\n    hljs.registerLanguage(\"javascript\", javascript);\n    const route = useRoute();\n    onMounted(() => {\n      hljs.highlightAll();\n    });\n    return () => (\n      <div>\n        <h1>\n          webpack的打包原理\n          <a\n            class=\"header-anchor\"\n            href=\"#webpack的打包原理\"\n            aria-label='Permalink to \"webpack的打包原理 {#webpack的打包原理}\"'\n          ></a>\n        </h1>\n        <div className=\"web-content\">\n          <div>\n            <h3 id=\"process\">打包流程</h3>\n            <p>\n              <span>打包开始前的准备工作</span>\n              <span>打包过程中(编译阶段)</span>\n              <span>打包结束后(成功和失败)</span>\n            </p>\n            <br />\n            这里考虑到<code>watch mode</code>\n            (当文件变化时，将重新进行编译),要把编译阶段单独解耦。\n            <br />\n            <h4>xxxxxxx1</h4>\n            <br />\n            <p>\n              webpack源码中，compiler代表这上面说得三个阶段，在它上面挂载着各种生命周期函数，而compilation专门负责编译相关的工作,也就是打包过程这个阶段\n            </p>\n            <p>\n              webpack源码中，compiler代表这上面说得三个阶段，在它上面挂载着各种生命周期函数，而compilation专门负责编译相关的工作,也就是打包过程这个阶段\n            </p>\n            <img src=\"\" alt=\"\" className=\"src\" />\n            <br />\n            <h4>xxxxxxx2</h4>\n            <p>\n              webpack源码中，compiler代表这上面说得三个阶段，在它上面挂载着各种生命周期函数，而compilation专门负责编译相关的工作,也就是打包过程这个阶段\n            </p>\n            <p>\n              webpack源码中，compiler代表这上面说得三个阶段，在它上面挂载着各种生命周期函数，而compilation专门负责编译相关的工作,也就是打包过程这个阶段\n            </p>\n          </div>\n          <br />\n          <div>\n            <h3 id=\"stream\">实现webpack事件流</h3>\n            <p>\n              这里需要借助Tapable，它是一个类似与node.js中的EventEmitter的库，但\n              <strong>专注于自定义事件的触发和处理</strong>\n              通过Tapable我们可以注册自定义事件，然后在适当的时机去执行自定义事件。\n            </p>\n            <br />\n            <p>\n              我们可以通过tapable先注册一系列的生命周期函数，然后在合适的时间点执行。\n            </p>\n            <br />\n            比如：\n            <p>\n              <pre>\n                <code class=\"language-javascript\">\n                  {[\n                    \"const {'SyncHook'} = require('tapable'), //这是一个同步钩子\",\n                    \"\\n//第一步：实例化钩子函数，可以在这里定义形参\",\n                    \"\\nconst syncHook = new SyncHook(['author', 'age'])\",\n                    \"\\n//第二步：注册事件1\",\n                    \"\\nsyncHook.tap('监听器1', (name, age)=>{\\n console.log('监听器1:', 'name', 'age')\\n});\",\n                    \"\\n//第三步：注册事件2\",\n                    \"\\nsyncHook.tap('监听器2', (name) =>;{\\n console.log('监听器2', name)\\n});\",\n                    \"\\n//第四步：注册事件3\",\n                    \"\\nsyncHook.tap('监听器3', (name) =>;{\\n console.log('监听器3', name)\\n});\",\n                    \"\\n//第五步：触发事件，这里传的是实参，会被每一个注册函数接收到\",\n                    \"\\nsyncHook.call('麦林', '100')\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n            <br />\n            在webpack中，就是通过tapable在compiler和compilation上像这样挂载着一系列\n            <code>生命周期Hook</code>，它就像是一座桥梁，宽川着整个构建过程:\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"class Compiler {\",\n                    \"\\n  constructor() {\",\n                    \"\\n    //它内部提供了很多钩子\",\n                    \"\\n    this.hooks = {\",\n                    \"\\n      run: new SyncHook(), //会在编译刚开始的时候触发此钩子\",\n                    \"\\n      done: new SyncHook(), //会在编译结束的时候触发此钩子\",\n                    \"\\n    };\",\n                    \"\\n  };\",\n                    \"\\n}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n          </div>\n          <br />\n          <div>\n            <h3 id=\"realization\">具体实现</h3>\n            <ul>\n              <li>(1) 搭建结构，读取配置参数</li>\n              <li>\n                (2) 用配置参数对象初始化<code>Compiler</code>对象\n              </li>\n              <li>(3) 挂载配置文件中的插件</li>\n              <li>\n                (4) 执行<code>Compiler</code>对象的<code>run</code>\n                方法开始执行编译\n              </li>\n              <li>\n                (5) 根据配置文件中<code>entry</code>配置项找到所有入口\n              </li>\n              <li>\n                (6) 从入口文件出发，调用配置的<code>loader</code>\n                规则，对各模块进行编译\n              </li>\n              <li>(7) 找出此模块所以来的模块，再对依赖模块进行编译</li>\n              <li>\n                (8) 等所有模块都编译完成后，根据模块之间的依赖关系，组装代码块\n                <code>chunk</code>\n              </li>\n              <li>\n                (9) 把各个代码块<code>chunk</code>\n                转换成一个一个文件加入到输出列表\n              </li>\n              {/* <li>(10) 确定好输出内容之后，根据配置的输出路径和文件名，将文件内容写入到文件系统</li> */}\n            </ul>\n            <br />\n            <h4>(1)、搭建结构，读取配置参数</h4>\n            <br />\n            <p>\n              webpack的本质是一个函数，它接受一个配置信息作为参数，执行返回一个{\" \"}\n              <span>\n                <code>compiler对象</code>\n              </span>\n              ，调用compiler对象中的run方法则启动编译。run\n              方法接受一个回调，可以用来查看编译过程中的错误信息或编译信息\n            </p>\n            <br />\n            <div>\n              <i>搭建结构:</i>\n            </div>\n            <br />\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"class Compiler{\",\n                    \"\\n constructor(){}\",\n                    \"\\n\\n run(callback){}\",\n                    \"\\n}\",\n                    \"\\n\\n\",\n                    \"//第一步：搭建结构，读取配置参数，这里接受的是webpack.config.js中的参数\",\n                    \"\\nfunction webpack(webpackOptions) {\",\n                    \"\\n  const compiler = new Compiler()\",\n                    \"\\n  return compiler;\",\n                    \"\\n}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n            <br />\n            <h4>\n              (2)、用配置参数对象初始化<code>Compiler</code>对象\n            </h4>\n            <br />\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"class Compiler{\",\n                    \"\\n constructor(wewbpackOptions){\",\n                    \"\\n   this.options = webpackOptions, //存储配置信息\",\n                    \"\\n   //它内部提供了很多钩子\",\n                    \"\\n    this.hooks = {\",\n                    \"\\n      run: new SyncHook(), //会在编译刚开始的时候触发此钩子\",\n                    \"\\n      done: new SyncHook(), //会在编译结束的时候触发此钩子\",\n                    \"\\n    };\",\n                    \"}\",\n                    \"\\n}\",\n                    \"\\n\\n\",\n                    \"//第一步：搭建结构，读取配置参数，这里接受的是webpack.config.js中的参数\",\n                    \"\\nfunction webpack(webpackOptions) {\",\n                    \"\\n  const compiler = new Compiler()\",\n                    \"\\n  return compiler;\",\n                    \"}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n            <br />\n            <h4>(3)、挂载配置文件中的插件</h4>\n            <br />\n            <p>\n              webpack plugin 是一个带有apply方法的构造函数。apply方法接收{\" \"}\n              <span>\n                <code>compiler对象</code>\n              </span>\n              为参数，当webpack内部进行插件挂载时会执行apply函数。我们可以在\n              apply方法中订阅各种生命周期钩子，当到达对应的时间点时就会执行。\n            </p>\n            <br />\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"//自定义插件WebpackRunPlugin\",\n                    \"\\nclass WebpackRunPlugin{\",\n                    \"\\n apply(compiler){\",\n                    \"\\n   compiler.hooks.run.tap('WebpackRunPlugin',()=>{\",\n                    \"\\n     console.log('开始编译')\",\n                    \"\\n   });\",\n                    \"\\n}\",\n                    \"\\n\\n\",\n                    \"//自定义插件WebpackDonePlugin\",\n                    \"\\nclass WebpackRunPlugin{\",\n                    \"\\n apply(compiler){\",\n                    \"\\n   compiler.hooks.done.tap('WebpackDonePlugin',()=>{\",\n                    \"\\n     console.log('编译完成')\",\n                    \"\\n   });\",\n                    \"\\n}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n            <br />\n            <p>webpack.config.js:</p>\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"const {WebpackRunPlugin,WebpackDonePlugin} = require('./webpack');\",\n                    \"\\nmodule.exports = {\",\n                    \"\\n plugins:[new WebpackRunPlugin(),new WebpackDonePlugin()]\",\n                    \"\\n}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n            <br />\n            <p>执行插件的apply方法</p>\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"//第一步：搭建结构，读取配置参数，这里接受的是webpack.config.js中的参数\",\n                    \"\\nfunction webpack(webpackOptions){\",\n                    \"\\n  //第二步：用配置参数对象初始化`compiler`对象\",\n                    \"\\n  const compiler = new Compiler(webpackOptions);\",\n                    \"\\n  // 第三步：挂载配置文件中的插件\",\n                    \"\\n  const {plugins} = webpackOptions;\",\n                    \"\\n  for(let plugin of plugins){\",\n                    \"\\n    plugin.apply(compiler);\",\n                    \"\\n  }\",\n                    \"\\n  return compiler;\",\n                    \"\\n}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n            <br />\n            <h4>(4) 执行Compiler对象的run方法开始执行编译</h4>\n            <br />\n            <p>\n              在正式开始编译前，我们需要先调用Compiler中的run钩子，表示开始启动编译；编译结束后，需要调用done钩子，表示编译完成\n            </p>\n            <br />\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"class Compiler{\",\n                    \"\\n constructor(){\",\n                    \"\\n  //省略\",\n                    \"\\n}\",\n                    \"\\n compiler(){\",\n                    \"\\n  //\",\n                    \"\\n}\",\n\n                    \"\\n\\n//第四步：执行`compiler` 对象的`run方法开始执行编译`\",\n                    \"\\n run(callback){\",\n                    \"\\n   this.hooks.run.call(); //在编译前触发触发run钩子\",\n                    \"\\n   const onCompiled = ()=>{\",\n                    \"\\n     this.hooks.run.call(); //在编译前触发触发run钩子\",\n                    \"\\n   };\",\n                    \"\\n   this.compiler(onCompiled); //开始编译，成功之后调用onCompiled\",\n                    \"\\n }\",\n                    \"\\n}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n            <br />\n            <p>\n              编译这个阶段需要单独解耦出来，通过\n              <span>\n                <code>Compilation</code>\n              </span>\n              来完成，定义\n              <span>\n                <code>Compilation</code>\n              </span>\n              大致结构：\n            </p>\n            <br />\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"class Compiler{\",\n                    \"\\n  //省略其他\",\n                    \"\\n run(callback){\",\n                    \"\\n //省略\",\n                    \"\\n }\",\n                    \"\\n compile(callback){\",\n                    \"\\n   let compilation = new Compilation(this.options);\",\n                    \"\\n   compilation.build(callback); //执行compilation的build方法进行编译，编译成功之后执行回调\",\n                    \"\\n }\",\n                    \"\\n}\",\n                    \"\\n\\n\",\n                    \"class Compilation{\",\n                    \"\\n constructor(webpackOptions){\",\n                    \"\\n   this.options = webpackOptions;\",\n                    \"\\n   this.modules = []; //本次编译所有生成出来的模块\",\n                    \"\\n   this.chunks = []; //本次编译产出的所有的代码块，入口模块和依赖的模块打包一起为代码块\",\n                    \"\\n   this.assets = []; //本次编译产出的资源文件\",\n                    \"\\n   this.fileDependencies = []; // 本次打包涉及的文件，这里主要是为了实现watch模式下监听文件的变化，文件变化后会重新编译\",\n                    \"\\n }\",\n                    \"\\n\\n\",\n                    \"\\n build(callback){\",\n                    \"\\n  // 这里开始做编译工作，编译成功之后执行callback\",\n                    \"\\n  callback()\",\n                    \"\\n }\",\n                    \"\\n}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n            <br />\n            <h4>\n              (5) 根据配置文件中的<code>entry</code>配置项找到所有的入口\n            </h4>\n            <br />\n            <p>现在我们开始进行编译</p>\n            <br />\n            <p>\n              编译开始前，我需要先知道入口文件，而\n              <span>\n                <code>入口的配置方式</code>\n              </span>\n              有多种，可以是字符串，也可以是对象，这一步是统一配置信息的格式，找出\n              所有入口(考虑多入口打包的场景)\n            </p>\n            <br />\n\n            <br />\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"class Compilation{\",\n                    \"\\n constructor(webpackOptions){\",\n                    \"\\n   this.options = webpackOptions;\",\n                    \"\\n   this.modules = []; //本次编译所有生成出来的模块\",\n                    \"\\n   this.chunks = []; //本次编译产出的所有的代码块，入口模块和依赖的模块打包一起为代码块\",\n                    \"\\n   this.assets = []; //本次编译产出的资源文件\",\n                    \"\\n   this.fileDependencies = []; // 本次打包涉及的文件，这里主要是为了实现watch模式下监听文件的变化，文件变化后会重新编译\",\n                    \"\\n }\",\n                    \"\\n\\n\",\n                    \"\\n build(callback){\",\n                    \"\\n  // 第五步：根据配置文件中的`entry`配置找到所有的入口\",\n                    \"\\n  let entry = {};\",\n                    \"\\n  if(typeof this.options.entry === 'string'){\",\n                    \"\\n    entry.main = this.options.entry; //如果是单入口，将entry:'xx'变成{main:'xx'},这里需要做兼容\",\n                    \"\\n  }else {\",\n                    \"\\n   entry = this.options.entry;\",\n                    \"\\n  }\",\n                    \"\\n\\n  //编译成功执行callback\",\n                    \"\\n  callback()\",\n                    \"\\n }\",\n                    \"\\n}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n            <br />\n            <h4>\n              (6) 从入口文件出发，调用配置的<code>loader</code>\n              规则，对各模块进行编译\n            </h4>\n            <br />\n            <p>\n              loader\n              本质上就是函数，接收资源文件或者上一个loader产生的结果作为入参，最终输出转换后的结果\n            </p>\n            <br />\n            <p>写两个自定义loader配置到webpack.config.js中：</p>\n            <br />\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"const loader1 = () = > {\",\n                    \"\\n return source + '// 给你的代码加点注释：loader1';\",\n                    \"\\n};\",\n                    \"\\n\\n\",\n                    \"const loader2 = () = > {\",\n                    \"\\n return source + '// 给你的代码加点注释：loader2';\",\n                    \"\\n};\",\n                    \"\\n\\n//webpack.config.js:\",\n                    \"const {loader1,loader2} = require('./webpack');\",\n                    \"\\nmodule.exports = {\",\n                    \"\\n modules:{\",\n                    \"\\n  rules:[\",\n                    \"\\n   {\",\n                    \"\\n    test:/.js$/\",\n                    \"\\n    use:[loader1,loader2]\",\n                    \"\\n   }\",\n                    \"\\n  ]\",\n                    \"\\n}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n            <br />\n            <p>\n              这一步骤将从入口文件出发，然后查找出对应的 Loader\n              对源代码进行翻译和替换。主要有三点\n            </p>\n            <br />\n            <p>\n              <label>1.入口文件的绝对路径添加到依赖数组中；</label>\n              <label>\n                2.得到入口模块的\n                <span>\n                  <code>module</code>\n                </span>\n                对象；(读取模块内容，创建模块对象，对源代码进行翻译转换)\n              </label>\n              <label>\n                3.将生成的入口文件\n                <span>\n                  <code>module</code>\n                </span>\n                对象push进行this.modules中；\n              </label>\n            </p>\n            <br />\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"const baseDir = process.cwd().replace(//g,'/');\",\n                    \"\\n\\n\",\n                    \"class Compilation{\",\n                    \"\\n constructor(webpackOptions){\",\n                    \"\\n   this.options = webpackOptions;\",\n                    \"\\n   this.modules = []; //本次编译所有生成出来的模块\",\n                    \"\\n   this.chunks = []; //本次编译产出的所有的代码块，入口模块和依赖的模块打包一起为代码块\",\n                    \"\\n   this.assets = []; //本次编译产出的资源文件\",\n                    \"\\n   this.fileDependencies = []; // 本次打包涉及的文件，这里主要是为了实现watch模式下监听文件的变化，文件变化后会重新编译\",\n                    \"\\n }\",\n                    \"\\n\\n\",\n                    \"\\n buildModule(){\",\n                    \"\\n   // 读取模块内容。获取源代码\",\n                    \"\\n   let sourceCode = fs.readFileSync(modulePath,'utf8');\",\n                    \"\\n   // buildModule最终会返回一个modules对象，每个模块都会有一个id，id是相对于根目录的相对路径\",\n                    \"\\n   let moduleId = './' + path.posix.relative(baseDir,modulePath); //模块id：从根目录出发，找到与该模块的相对路径(./src/index.js)\",\n                    \"\\n   // 创建模块对象\",\n                    \"\\n   let module = {\",\n                    \"\\n     id: moduleId,\",\n                    \"\\n     names: [name], //names设计成数组是因为代表的是此模块属于哪个代码块，可能属于多个代码块\",\n                    \"\\n     dependencies: [], //它依赖的模块\",\n                    \"\\n     _source: '', //该模块的代码信息\",\n                    \"\\n   };\",\n                    \"\\n   // 找到对应的`loader`对源代码进行翻译和转换\",\n                    \"\\n   let loaders = []\",\n                    \"\\n   let { rules = []} = this.options.module;\",\n                    \"\\n   rules.forEach(rule=>{\",\n                    \"\\n     let { test } = rule;\",\n                    \"\\n     // 如果模块的路径和正则匹配，就把此规则对应的loader添加到loader数组中\",\n                    \"\\n     if(modulePath.match(test)){\",\n                    \"\\n       loaders.push(...rule.use)\",\n                    \"\\n     }\",\n                    \"\\n   });\",\n                    \"\\n\\n//自右向做左对模块进行转移\",\n                    \"\\n sourceCode = loaders.reduceRight((code , loader) =>{\",\n                    \"\\n   return loader(code);\",\n                    \"\\n}, sourceCode);\",\n                    \"\\n\\n   return module;\",\n                    \"\\n }\",\n                    \"\\n\\n build(callback){\",\n                    \"\\n  // 第五步：根据配置文件中的`entry`配置找到所有的入口\",\n                    \"\\n  let entry = {};\",\n                    \"\\n  if(typeof this.options.entry === 'string'){\",\n                    \"\\n  entry.main = this.options.entry; //如果是单入口，将entry:'xx'变成{main:'xx'},这里需要做兼容\",\n                    \"\\n  }else {\",\n                    \"\\n  entry = this.options.entry;\",\n                    \"\\n  }\",\n                    \"\\n  //第六步：从入口文件出发，调用配置的`loader`规则，对各模块进行编译\",\n                    \"\\n  for(let entryName in entry){\",\n                    \"\\n  let entryFilePath = path.posix.join(baseDir,entry[entryName]); \",\n                    \"\\n  //1. 把入口文件的绝对路径添加到以来数组中，记录此次编译依赖的模块 \",\n                    \"\\n  this.fileDependencies.push(entryFilePath);\",\n                    \"\\n  //2. 得到入口模块的`module` 对象\",\n                    \"\\n  let entryModule = this.buildModule(entryName,entryFilePath) \",\n                    \"\\n  //3. 将生成的入口文件`module` 对象 push 进 `this.modules`中 \",\n                    \"\\n  this.modules.push(entryModule);\",\n                    \"\\n  }\",\n                    \"\\n\\n  //编译成功执行callback\",\n                    \"\\n  callback()\",\n                    \"\\n }\",\n                    \"\\n}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n            <h4>(7) 找出此模块所依赖的模块，再对依赖模块进行编译</h4>\n            <br />\n            <p>\n              该步骤经过细化可以将其拆分成十个小步骤：\n              <span>（7.1）：先把源代码编译成 AST</span>\n              <span>\n                （7.2）：在 AST 中查找 require\n                语句，找出依赖的模块名称和绝对路径\n              </span>\n              <span>\n                （7.3）：将依赖模块的绝对路径 push 到 this.fileDependencies 中\n              </span>\n              <span>（7.4）：生成依赖模块的模块 id</span>\n              <span>（7.5）：修改语法结构，把依赖的模块改为依赖模块 id</span>\n              <span>\n                （7.6）：将依赖模块的信息 push 到该模块的 dependencies 属性中\n              </span>\n              <span>\n                （7.7）：生成新代码，并把转译后的源代码放到 module._source\n                属性上\n              </span>\n              <span>\n                （7.8）：对依赖模块进行编译（对 module 对象中的 dependencies\n                进行递归执行 buildModule ）\n              </span>\n              <span>\n                （7.9）：对依赖模块编译完成后得到依赖模块的 module 对象，push 到\n                this.modules 中\n              </span>\n              <span>\n                （7.10）：等依赖模块全部编译完成后，返回入口模块的 module 对象\n              </span>\n            </p>\n            <br />\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"const parser = require('@babel/parser');\",\n                    \"\\n let types = require('@babel/types'); //用来生成或者判断节点的AST语法树的节点\",\n                    \"\\n const traverse = require('@babel/traverse').default;\",\n                    \"\\n const generator = require('@babel/generator').default;\",\n                    \"\\n\",\n                    \"\\n//获取文件路径\",\n                    \"\\n function tryExtensions(modulePath, extensions) {\",\n                    \"\\n   if (fs.existsSync(modulePath)) {\",\n                    \"\\n     return modulePath;\",\n                    \"\\n   }\",\n                    \"\\n   for (let i = 0; i < extensions?.length; i++) {\",\n                    \"\\n     let filePath = modulePath + extensions[i];\",\n                    \"\\n     if (fs.existsSync(filePath)) {\",\n                    \"\\n       return filePath;\",\n                    \"\\n     }\",\n                    \"\\n   }\",\n                    \"\\n   throw new Error(`无法找到${modulePath}`);\",\n                    \"\\n }\",\n                    \"\\n\\nconst baseDir = process.cwd().replace(//g,'/');\",\n                    \"\\n\\n\",\n                    \"class Compilation{\",\n                    \"\\n constructor(webpackOptions){\",\n                    \"\\n   this.options = webpackOptions;\",\n                    \"\\n   this.modules = []; //本次编译所有生成出来的模块\",\n                    \"\\n   this.chunks = []; //本次编译产出的所有的代码块，入口模块和依赖的模块打包一起为代码块\",\n                    \"\\n   this.assets = []; //本次编译产出的资源文件\",\n                    \"\\n   this.fileDependencies = []; // 本次打包涉及的文件，这里主要是为了实现watch模式下监听文件的变化，文件变化后会重新编译\",\n                    \"\\n }\",\n                    \"\\n\\n\",\n                    \"\\n buildModule(){\",\n                    \"\\n  //省略其他\",\n                    \"\\n\\n//自右向做左对模块进行转移\",\n                    \"\\n  sourceCode = loaders.reduceRight((code , loader) =>{\",\n                    \"\\n   return loader(code);\",\n                    \"\\n  }, sourceCode);\",\n                    \"\\n\\n//通过loader翻译后的内容一定得是js内容，因为最后得走我们babel-parse，只有js才能成编译AST\",\n                    \"\\n  //第七步：找出此模块所依赖的模块，再对依赖模块进行编译\",\n                    \"\\n  //7.1:先把源代码编译成 [AST](https://astexplorer.net/)\",\n                    \"\\n   let ast = parser.parse(sourceCode, { sourceType: 'module' });\",\n                    \"\\n    traverse(ast, {\",\n                    \"\\n    CallExpression: (nodePath) => {\",\n                    \"\\n    const { node } = nodePath;\",\n                    \"\\n    //7.2在 `AST` 中查找 `require` 语句，找出依赖的模块名称和绝对路径\",\n                    \"\\n    if (node.callee.name === 'require') {\",\n                    \"\\n      let depModuleName = node.arguments[0].value; //获取依赖的模块\",\n                    \"\\n      let dirname = path.posix.dirname(modulePath); //获取当前正在编译的模所在的目录\",\n                    \"\\n      let depModulePath = path.posix.join(dirname, depModuleName); //获取依赖模块的绝对路径\",\n                    \"\\n      let extensions = this.options.resolve?.extensions || [ '.js' ]; //获取配置中的extensions\",\n                    \"\\n      depModulePath = tryExtensions(depModulePath, extensions); //尝试添加后缀，找到一个真实在硬盘上存在的文件\",\n                    \"\\n      //7.3:将依赖模块的绝对路径 push 到 `this.fileDependencies` 中\",\n                    \"\\n      this.fileDependencies.push(depModulePath);\",\n                    \"\\n      //7.4:生成依赖模块的`模块 id`\",\n                    \"\\n      let depModuleId = './' + path.posix.relative(baseDir, depModulePath);\",\n                    \"\\n      //7.5:修改语法结构，把依赖的模块改为依赖`模块 id` require('./name')=>require('./src/name.js')\",\n                    \"\\n      node.arguments = [types.stringLiteral(depModuleId)];\",\n                    \"\\n      //7.6:将依赖模块的信息 push 到该模块的 `dependencies` 属性中\",\n                    \"\\n      module.dependencies.push({ depModuleId, depModulePath });\",\n                    \"\\n    }\",\n                    \"\\n    });\",\n                    \"\\n\\n//7.7：生成新代码，并把转译后的源代码放到 `module._source` 属性上\",\n                    \"\\n   let { code } = generator(ast);\",\n                    \"\\n   module._source = code;\",\n                    \"\\n   //7.8：对依赖模块进行编译（对 `module 对象`中的 `dependencies` 进行递归执行 `buildModule` ）\",\n                    \"\\n   module.dependencies.forEach(({ depModuleId, depModulePath }) => {\",\n                    \"\\n   //考虑到多入口打包 ：一个模块被多个其他模块引用，不需要重复打包\",\n                    \"\\n   let existModule = this.modules.find((item) => item.id === depModuleId);\",\n                    \"\\n   //如果modules里已经存在这个将要编译的依赖模块了，那么就不需要编译了，直接把此代码块的名称添加到对应模块的names字段里就可以\",\n                    \"\\n   if (existModule) {\",\n                    \"\\n     //names指的是它属于哪个代码块chunk\",\n                    \"\\n     existModule.names.push(name);\",\n                    \"\\n   } else {\",\n                    \"\\n     //7.9：对依赖模块编译完成后得到依赖模块的 `module 对象`，push 到 `this.modules` 中\",\n                    \"\\n     let depModule = this.buildModule(name, depModulePath);\",\n                    \"\\n     this.modules.push(depModule);\",\n                    \"\\n   }\",\n                    \"\\n   });\",\n                    \"\\n   //7.10：等依赖模块全部编译完成后，返回入口模块的 `module` 对象\",\n                    \"\\n   return module;\",\n                    \"\\n }\",\n                    \"\\n\\n build(callback){\",\n                    \"\\n  // 第五步：根据配置文件中的`entry`配置找到所有的入口\",\n                    \"\\n  let entry = {};\",\n                    \"\\n  if(typeof this.options.entry === 'string'){\",\n                    \"\\n  entry.main = this.options.entry; //如果是单入口，将entry:'xx'变成{main:'xx'},这里需要做兼容\",\n                    \"\\n  }else {\",\n                    \"\\n  entry = this.options.entry;\",\n                    \"\\n  }\",\n                    \"\\n  //第六步：从入口文件出发，调用配置的`loader`规则，对各模块进行编译\",\n                    \"\\n  for(let entryName in entry){\",\n                    \"\\n    let entryFilePath = path.posix.join(baseDir,entry[entryName]); \",\n                    \"\\n    //1. 把入口文件的绝对路径添加到以来数组中，记录此次编译依赖的模块 \",\n                    \"\\n    this.fileDependencies.push(entryFilePath);\",\n                    \"\\n    //2. 得到入口模块的`module` 对象\",\n                    \"\\n    let entryModule = this.buildModule(entryName,entryFilePath) \",\n                    \"\\n    //3. 将生成的入口文件`module` 对象 push 进 `this.modules`中 \",\n                    \"\\n    this.modules.push(entryModule);\",\n                    \"\\n  }\",\n                    \"\\n\\n  //编译成功执行callback\",\n                    \"\\n  callback()\",\n                    \"\\n }\",\n                    \"\\n}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n            <h4>\n              (8) 等所有模块都编译完成后，根据模块之间的依赖关系，组装代码块\n              <code>chunk</code>\n            </h4>\n            <br />\n            <p>\n              一般来说，每个入口文件会对应一个代码块chunk，每个代码块chunk里面会放着本入口模块和它依赖的模块，这里暂时不考虑代码分割\n            </p>\n            <br />\n\n            <br />\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"class Compilation{\",\n                    \"\\n constructor(webpackOptions){\",\n                    \"\\n   this.options = webpackOptions;\",\n                    \"\\n   this.modules = []; //本次编译所有生成出来的模块\",\n                    \"\\n   this.chunks = []; //本次编译产出的所有的代码块，入口模块和依赖的模块打包一起为代码块\",\n                    \"\\n   this.assets = []; //本次编译产出的资源文件\",\n                    \"\\n   this.fileDependencies = []; // 本次打包涉及的文件，这里主要是为了实现watch模式下监听文件的变化，文件变化后会重新编译\",\n                    \"\\n }\",\n                    \"\\n\\n\",\n                    \"\\n build(callback){\",\n                    \"\\n  // 第五步：根据配置文件中的`entry`配置找到所有的入口\",\n                    \"\\n  let entry = {};\",\n                    \"\\n  if(typeof this.options.entry === 'string'){\",\n                    \"\\n    entry.main = this.options.entry; //如果是单入口，将entry:'xx'变成{main:'xx'},这里需要做兼容\",\n                    \"\\n  }else {\",\n                    \"\\n   entry = this.options.entry;\",\n                    \"\\n  }\",\n                    \"\\n  //第六步：从入口文件出发，调用配置的`loader`规则，对各模块进行编译\",\n                    \"\\n  for(let entryName in entry){\",\n                    \"\\n    let entryFilePath = path.posix.join(baseDir,entry[entryName]); \",\n                    \"\\n    //1. 把入口文件的绝对路径添加到以来数组中，记录此次编译依赖的模块 \",\n                    \"\\n    this.fileDependencies.push(entryFilePath);\",\n                    \"\\n    //2. 得到入口模块的`module` 对象\",\n                    \"\\n    let entryModule = this.buildModule(entryName,entryFilePath) \",\n                    \"\\n    //3. 将生成的入口文件`module` 对象 push 进 `this.modules`中 \",\n                    \"\\n    this.modules.push(entryModule);\",\n                    \"\\n    //第八步：等所有模块都编译完成后，根据模块之间的依赖关系，组装代码块 `chunk`（一般来说，每个入口文件会对应一个代码块`chunk`，每个代码块`chunk`里面会放着本入口\",\n                    \"模块  和它依赖的模块\",\n                    \"\\n    let chunk = {\",\n                    \"\\n     name: entryName, //entryName='main' 代码块的名称\",\n                    \"\\n     entryModule, //此代码块对应的module的对象,这里就是src/index.js 的module对象\",\n                    \"\\n     modules: this.modules.filter((item) => item.names.includes(entryName)), //找出属于该代码块的模块\",\n                    \"\\n    }\",\n                    \"\\n    this.chunks.push(chunk);\",\n                    \"\\n  }\",\n                    \"\\n\\n  //编译成功执行callback\",\n                    \"\\n  callback()\",\n                    \"\\n }\",\n                    \"\\n}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n            <br />\n            <h4>\n              (9) 把各个代码块<code>chunk</code>转换成一个一个文件加入到输出列表\n            </h4>\n            <br />\n            <p>\n              这一步需要结合配置文件中的output.filename去生成输出文件的文件名称，同时还需要生成运行时代码:\n            </p>\n            <br />\n\n            <br />\n            <p>\n              <pre>\n                <code>\n                  {[\n                    \"class Compilation{\",\n                    \"\\n constructor(webpackOptions){\",\n                    \"\\n   this.options = webpackOptions;\",\n                    \"\\n   this.modules = []; //本次编译所有生成出来的模块\",\n                    \"\\n   this.chunks = []; //本次编译产出的所有的代码块，入口模块和依赖的模块打包一起为代码块\",\n                    \"\\n   this.assets = []; //本次编译产出的资源文件\",\n                    \"\\n   this.fileDependencies = []; // 本次打包涉及的文件，这里主要是为了实现watch模式下监听文件的变化，文件变化后会重新编译\",\n                    \"\\n }\",\n                    \"\\n\\n\",\n                    \"\\n build(callback){\",\n                    \"\\n  // 第五步：根据配置文件中的`entry`配置找到所有的入口\",\n                    \"\\n  let entry = {};\",\n                    \"\\n  if(typeof this.options.entry === 'string'){\",\n                    \"\\n    entry.main = this.options.entry; //如果是单入口，将entry:'xx'变成{main:'xx'},这里需要做兼容\",\n                    \"\\n  }else {\",\n                    \"\\n   entry = this.options.entry;\",\n                    \"\\n  }\",\n                    \"\\n  //第六步：从入口文件出发，调用配置的`loader`规则，对各模块进行编译\",\n                    \"\\n  for(let entryName in entry){\",\n                    \"\\n    let entryFilePath = path.posix.join(baseDir,entry[entryName]); \",\n                    \"\\n    //1. 把入口文件的绝对路径添加到以来数组中，记录此次编译依赖的模块 \",\n                    \"\\n    this.fileDependencies.push(entryFilePath);\",\n                    \"\\n    //2. 得到入口模块的`module` 对象\",\n                    \"\\n    let entryModule = this.buildModule(entryName,entryFilePath) \",\n                    \"\\n    //3. 将生成的入口文件`module` 对象 push 进 `this.modules`中 \",\n                    \"\\n    this.modules.push(entryModule);\",\n                    \"\\n    //第八步：等所有模块都编译完成后，根据模块之间的依赖关系，组装代码块 `chunk`（一般来说，每个入口文件会对应一个代码块`chunk`，每个代码块`chunk`里面会放着本入口\",\n                    \"模块  和它依赖的模块\",\n                    \"\\n    let chunk = {\",\n                    \"\\n     name: entryName, //entryName='main' 代码块的名称\",\n                    \"\\n     entryModule, //此代码块对应的module的对象,这里就是src/index.js 的module对象\",\n                    \"\\n     modules: this.modules.filter((item) => item.names.includes(entryName)), //找出属于该代码块的模块\",\n                    \"\\n    }\",\n                    \"\\n    this.chunks.push(chunk);\",\n                    \"\\n  }\",\n                    \"\\n\\n  //编译成功执行callback\",\n                    \"\\n  callback()\",\n                    \"\\n }\",\n                    \"\\n}\",\n                  ]}\n                </code>\n              </pre>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  },\n};\nexport default Build;\n","/* eslint-disable no-multi-assign */\n\nfunction deepFreeze(obj) {\n  if (obj instanceof Map) {\n    obj.clear =\n      obj.delete =\n      obj.set =\n        function () {\n          throw new Error('map is read-only');\n        };\n  } else if (obj instanceof Set) {\n    obj.add =\n      obj.clear =\n      obj.delete =\n        function () {\n          throw new Error('set is read-only');\n        };\n  }\n\n  // Freeze self\n  Object.freeze(obj);\n\n  Object.getOwnPropertyNames(obj).forEach((name) => {\n    const prop = obj[name];\n    const type = typeof prop;\n\n    // Freeze prop if it is an object or function and also not already frozen\n    if ((type === 'object' || type === 'function') && !Object.isFrozen(prop)) {\n      deepFreeze(prop);\n    }\n  });\n\n  return obj;\n}\n\n/** @typedef {import('highlight.js').CallbackResponse} CallbackResponse */\n/** @typedef {import('highlight.js').CompiledMode} CompiledMode */\n/** @implements CallbackResponse */\n\nclass Response {\n  /**\n   * @param {CompiledMode} mode\n   */\n  constructor(mode) {\n    // eslint-disable-next-line no-undefined\n    if (mode.data === undefined) mode.data = {};\n\n    this.data = mode.data;\n    this.isMatchIgnored = false;\n  }\n\n  ignoreMatch() {\n    this.isMatchIgnored = true;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction escapeHTML(value) {\n  return value\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;');\n}\n\n/**\n * performs a shallow merge of multiple objects into one\n *\n * @template T\n * @param {T} original\n * @param {Record<string,any>[]} objects\n * @returns {T} a single new object\n */\nfunction inherit$1(original, ...objects) {\n  /** @type Record<string,any> */\n  const result = Object.create(null);\n\n  for (const key in original) {\n    result[key] = original[key];\n  }\n  objects.forEach(function(obj) {\n    for (const key in obj) {\n      result[key] = obj[key];\n    }\n  });\n  return /** @type {T} */ (result);\n}\n\n/**\n * @typedef {object} Renderer\n * @property {(text: string) => void} addText\n * @property {(node: Node) => void} openNode\n * @property {(node: Node) => void} closeNode\n * @property {() => string} value\n */\n\n/** @typedef {{scope?: string, language?: string, sublanguage?: boolean}} Node */\n/** @typedef {{walk: (r: Renderer) => void}} Tree */\n/** */\n\nconst SPAN_CLOSE = '</span>';\n\n/**\n * Determines if a node needs to be wrapped in <span>\n *\n * @param {Node} node */\nconst emitsWrappingTags = (node) => {\n  // rarely we can have a sublanguage where language is undefined\n  // TODO: track down why\n  return !!node.scope;\n};\n\n/**\n *\n * @param {string} name\n * @param {{prefix:string}} options\n */\nconst scopeToCSSClass = (name, { prefix }) => {\n  // sub-language\n  if (name.startsWith(\"language:\")) {\n    return name.replace(\"language:\", \"language-\");\n  }\n  // tiered scope: comment.line\n  if (name.includes(\".\")) {\n    const pieces = name.split(\".\");\n    return [\n      `${prefix}${pieces.shift()}`,\n      ...(pieces.map((x, i) => `${x}${\"_\".repeat(i + 1)}`))\n    ].join(\" \");\n  }\n  // simple scope\n  return `${prefix}${name}`;\n};\n\n/** @type {Renderer} */\nclass HTMLRenderer {\n  /**\n   * Creates a new HTMLRenderer\n   *\n   * @param {Tree} parseTree - the parse tree (must support `walk` API)\n   * @param {{classPrefix: string}} options\n   */\n  constructor(parseTree, options) {\n    this.buffer = \"\";\n    this.classPrefix = options.classPrefix;\n    parseTree.walk(this);\n  }\n\n  /**\n   * Adds texts to the output stream\n   *\n   * @param {string} text */\n  addText(text) {\n    this.buffer += escapeHTML(text);\n  }\n\n  /**\n   * Adds a node open to the output stream (if needed)\n   *\n   * @param {Node} node */\n  openNode(node) {\n    if (!emitsWrappingTags(node)) return;\n\n    const className = scopeToCSSClass(node.scope,\n      { prefix: this.classPrefix });\n    this.span(className);\n  }\n\n  /**\n   * Adds a node close to the output stream (if needed)\n   *\n   * @param {Node} node */\n  closeNode(node) {\n    if (!emitsWrappingTags(node)) return;\n\n    this.buffer += SPAN_CLOSE;\n  }\n\n  /**\n   * returns the accumulated buffer\n  */\n  value() {\n    return this.buffer;\n  }\n\n  // helpers\n\n  /**\n   * Builds a span element\n   *\n   * @param {string} className */\n  span(className) {\n    this.buffer += `<span class=\"${className}\">`;\n  }\n}\n\n/** @typedef {{scope?: string, language?: string, sublanguage?: boolean, children: Node[]} | string} Node */\n/** @typedef {{scope?: string, language?: string, sublanguage?: boolean, children: Node[]} } DataNode */\n/** @typedef {import('highlight.js').Emitter} Emitter */\n/**  */\n\n/** @returns {DataNode} */\nconst newNode = (opts = {}) => {\n  /** @type DataNode */\n  const result = { children: [] };\n  Object.assign(result, opts);\n  return result;\n};\n\nclass TokenTree {\n  constructor() {\n    /** @type DataNode */\n    this.rootNode = newNode();\n    this.stack = [this.rootNode];\n  }\n\n  get top() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  get root() { return this.rootNode; }\n\n  /** @param {Node} node */\n  add(node) {\n    this.top.children.push(node);\n  }\n\n  /** @param {string} scope */\n  openNode(scope) {\n    /** @type Node */\n    const node = newNode({ scope });\n    this.add(node);\n    this.stack.push(node);\n  }\n\n  closeNode() {\n    if (this.stack.length > 1) {\n      return this.stack.pop();\n    }\n    // eslint-disable-next-line no-undefined\n    return undefined;\n  }\n\n  closeAllNodes() {\n    while (this.closeNode());\n  }\n\n  toJSON() {\n    return JSON.stringify(this.rootNode, null, 4);\n  }\n\n  /**\n   * @typedef { import(\"./html_renderer\").Renderer } Renderer\n   * @param {Renderer} builder\n   */\n  walk(builder) {\n    // this does not\n    return this.constructor._walk(builder, this.rootNode);\n    // this works\n    // return TokenTree._walk(builder, this.rootNode);\n  }\n\n  /**\n   * @param {Renderer} builder\n   * @param {Node} node\n   */\n  static _walk(builder, node) {\n    if (typeof node === \"string\") {\n      builder.addText(node);\n    } else if (node.children) {\n      builder.openNode(node);\n      node.children.forEach((child) => this._walk(builder, child));\n      builder.closeNode(node);\n    }\n    return builder;\n  }\n\n  /**\n   * @param {Node} node\n   */\n  static _collapse(node) {\n    if (typeof node === \"string\") return;\n    if (!node.children) return;\n\n    if (node.children.every(el => typeof el === \"string\")) {\n      // node.text = node.children.join(\"\");\n      // delete node.children;\n      node.children = [node.children.join(\"\")];\n    } else {\n      node.children.forEach((child) => {\n        TokenTree._collapse(child);\n      });\n    }\n  }\n}\n\n/**\n  Currently this is all private API, but this is the minimal API necessary\n  that an Emitter must implement to fully support the parser.\n\n  Minimal interface:\n\n  - addText(text)\n  - __addSublanguage(emitter, subLanguageName)\n  - startScope(scope)\n  - endScope()\n  - finalize()\n  - toHTML()\n\n*/\n\n/**\n * @implements {Emitter}\n */\nclass TokenTreeEmitter extends TokenTree {\n  /**\n   * @param {*} options\n   */\n  constructor(options) {\n    super();\n    this.options = options;\n  }\n\n  /**\n   * @param {string} text\n   */\n  addText(text) {\n    if (text === \"\") { return; }\n\n    this.add(text);\n  }\n\n  /** @param {string} scope */\n  startScope(scope) {\n    this.openNode(scope);\n  }\n\n  endScope() {\n    this.closeNode();\n  }\n\n  /**\n   * @param {Emitter & {root: DataNode}} emitter\n   * @param {string} name\n   */\n  __addSublanguage(emitter, name) {\n    /** @type DataNode */\n    const node = emitter.root;\n    if (name) node.scope = `language:${name}`;\n\n    this.add(node);\n  }\n\n  toHTML() {\n    const renderer = new HTMLRenderer(this, this.options);\n    return renderer.value();\n  }\n\n  finalize() {\n    this.closeAllNodes();\n    return true;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction anyNumberOfTimes(re) {\n  return concat('(?:', re, ')*');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(?:', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * @param { Array<string | RegExp | Object> } args\n * @returns {object}\n */\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === 'object' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n\n/** @typedef { {capture?: boolean} } RegexEitherOptions */\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args\n * @returns {string}\n */\nfunction either(...args) {\n  /** @type { object & {capture?: boolean} }  */\n  const opts = stripOptionsFromArgs(args);\n  const joined = '('\n    + (opts.capture ? \"\" : \"?:\")\n    + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/**\n * @param {RegExp | string} re\n * @returns {number}\n */\nfunction countMatchGroups(re) {\n  return (new RegExp(re.toString() + '|')).exec('').length - 1;\n}\n\n/**\n * Does lexeme start with a regular expression match at the beginning\n * @param {RegExp} re\n * @param {string} lexeme\n */\nfunction startsWith(re, lexeme) {\n  const match = re && re.exec(lexeme);\n  return match && match.index === 0;\n}\n\n// BACKREF_RE matches an open parenthesis or backreference. To avoid\n// an incorrect parse, it additionally matches the following:\n// - [...] elements, where the meaning of parentheses and escapes change\n// - other escape sequences, so we do not misparse escape sequences as\n//   interesting elements\n// - non-matching or lookahead parentheses, which do not capture. These\n//   follow the '(' with a '?'.\nconst BACKREF_RE = /\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./;\n\n// **INTERNAL** Not intended for outside usage\n// join logically computes regexps.join(separator), but fixes the\n// backreferences so they continue to match.\n// it also places each individual regular expression into it's own\n// match group, keeping track of the sequencing of those match groups\n// is currently an exercise for the caller. :-)\n/**\n * @param {(string | RegExp)[]} regexps\n * @param {{joinWith: string}} opts\n * @returns {string}\n */\nfunction _rewriteBackreferences(regexps, { joinWith }) {\n  let numCaptures = 0;\n\n  return regexps.map((regex) => {\n    numCaptures += 1;\n    const offset = numCaptures;\n    let re = source(regex);\n    let out = '';\n\n    while (re.length > 0) {\n      const match = BACKREF_RE.exec(re);\n      if (!match) {\n        out += re;\n        break;\n      }\n      out += re.substring(0, match.index);\n      re = re.substring(match.index + match[0].length);\n      if (match[0][0] === '\\\\' && match[1]) {\n        // Adjust the backreference.\n        out += '\\\\' + String(Number(match[1]) + offset);\n      } else {\n        out += match[0];\n        if (match[0] === '(') {\n          numCaptures++;\n        }\n      }\n    }\n    return out;\n  }).map(re => `(${re})`).join(joinWith);\n}\n\n/** @typedef {import('highlight.js').Mode} Mode */\n/** @typedef {import('highlight.js').ModeCallback} ModeCallback */\n\n// Common regexps\nconst MATCH_NOTHING_RE = /\\b\\B/;\nconst IDENT_RE = '[a-zA-Z]\\\\w*';\nconst UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';\nconst NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\nconst C_NUMBER_RE = '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float\nconst BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...\nconst RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\n\n/**\n* @param { Partial<Mode> & {binary?: string | RegExp} } opts\n*/\nconst SHEBANG = (opts = {}) => {\n  const beginShebang = /^#![ ]*\\//;\n  if (opts.binary) {\n    opts.begin = concat(\n      beginShebang,\n      /.*\\b/,\n      opts.binary,\n      /\\b.*/);\n  }\n  return inherit$1({\n    scope: 'meta',\n    begin: beginShebang,\n    end: /$/,\n    relevance: 0,\n    /** @type {ModeCallback} */\n    \"on:begin\": (m, resp) => {\n      if (m.index !== 0) resp.ignoreMatch();\n    }\n  }, opts);\n};\n\n// Common modes\nconst BACKSLASH_ESCAPE = {\n  begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0\n};\nconst APOS_STRING_MODE = {\n  scope: 'string',\n  begin: '\\'',\n  end: '\\'',\n  illegal: '\\\\n',\n  contains: [BACKSLASH_ESCAPE]\n};\nconst QUOTE_STRING_MODE = {\n  scope: 'string',\n  begin: '\"',\n  end: '\"',\n  illegal: '\\\\n',\n  contains: [BACKSLASH_ESCAPE]\n};\nconst PHRASAL_WORDS_MODE = {\n  begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n};\n/**\n * Creates a comment mode\n *\n * @param {string | RegExp} begin\n * @param {string | RegExp} end\n * @param {Mode | {}} [modeOptions]\n * @returns {Partial<Mode>}\n */\nconst COMMENT = function(begin, end, modeOptions = {}) {\n  const mode = inherit$1(\n    {\n      scope: 'comment',\n      begin,\n      end,\n      contains: []\n    },\n    modeOptions\n  );\n  mode.contains.push({\n    scope: 'doctag',\n    // hack to avoid the space from being included. the space is necessary to\n    // match here to prevent the plain text rule below from gobbling up doctags\n    begin: '[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)',\n    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,\n    excludeBegin: true,\n    relevance: 0\n  });\n  const ENGLISH_WORD = either(\n    // list of common 1 and 2 letter words in English\n    \"I\",\n    \"a\",\n    \"is\",\n    \"so\",\n    \"us\",\n    \"to\",\n    \"at\",\n    \"if\",\n    \"in\",\n    \"it\",\n    \"on\",\n    // note: this is not an exhaustive list of contractions, just popular ones\n    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, // contractions - can't we'd they're let's, etc\n    /[A-Za-z]+[-][a-z]+/, // `no-way`, etc.\n    /[A-Za-z][a-z]{2,}/ // allow capitalized words at beginning of sentences\n  );\n  // looking like plain text, more likely to be a comment\n  mode.contains.push(\n    {\n      // TODO: how to include \", (, ) without breaking grammars that use these for\n      // comment delimiters?\n      // begin: /[ ]+([()\"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()\":]?([.][ ]|[ ]|\\))){3}/\n      // ---\n\n      // this tries to find sequences of 3 english words in a row (without any\n      // \"programming\" type syntax) this gives us a strong signal that we've\n      // TRULY found a comment - vs perhaps scanning with the wrong language.\n      // It's possible to find something that LOOKS like the start of the\n      // comment - but then if there is no readable text - good chance it is a\n      // false match and not a comment.\n      //\n      // for a visual example please see:\n      // https://github.com/highlightjs/highlight.js/issues/2827\n\n      begin: concat(\n        /[ ]+/, // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */\n        '(',\n        ENGLISH_WORD,\n        /[.]?[:]?([.][ ]|[ ])/,\n        '){3}') // look for 3 words in a row\n    }\n  );\n  return mode;\n};\nconst C_LINE_COMMENT_MODE = COMMENT('//', '$');\nconst C_BLOCK_COMMENT_MODE = COMMENT('/\\\\*', '\\\\*/');\nconst HASH_COMMENT_MODE = COMMENT('#', '$');\nconst NUMBER_MODE = {\n  scope: 'number',\n  begin: NUMBER_RE,\n  relevance: 0\n};\nconst C_NUMBER_MODE = {\n  scope: 'number',\n  begin: C_NUMBER_RE,\n  relevance: 0\n};\nconst BINARY_NUMBER_MODE = {\n  scope: 'number',\n  begin: BINARY_NUMBER_RE,\n  relevance: 0\n};\nconst REGEXP_MODE = {\n  // this outer rule makes sure we actually have a WHOLE regex and not simply\n  // an expression such as:\n  //\n  //     3 / something\n  //\n  // (which will then blow up when regex's `illegal` sees the newline)\n  begin: /(?=\\/[^/\\n]*\\/)/,\n  contains: [{\n    scope: 'regexp',\n    begin: /\\//,\n    end: /\\/[gimuy]*/,\n    illegal: /\\n/,\n    contains: [\n      BACKSLASH_ESCAPE,\n      {\n        begin: /\\[/,\n        end: /\\]/,\n        relevance: 0,\n        contains: [BACKSLASH_ESCAPE]\n      }\n    ]\n  }]\n};\nconst TITLE_MODE = {\n  scope: 'title',\n  begin: IDENT_RE,\n  relevance: 0\n};\nconst UNDERSCORE_TITLE_MODE = {\n  scope: 'title',\n  begin: UNDERSCORE_IDENT_RE,\n  relevance: 0\n};\nconst METHOD_GUARD = {\n  // excludes method names from keyword processing\n  begin: '\\\\.\\\\s*' + UNDERSCORE_IDENT_RE,\n  relevance: 0\n};\n\n/**\n * Adds end same as begin mechanics to a mode\n *\n * Your mode must include at least a single () match group as that first match\n * group is what is used for comparison\n * @param {Partial<Mode>} mode\n */\nconst END_SAME_AS_BEGIN = function(mode) {\n  return Object.assign(mode,\n    {\n      /** @type {ModeCallback} */\n      'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },\n      /** @type {ModeCallback} */\n      'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }\n    });\n};\n\nvar MODES = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  MATCH_NOTHING_RE: MATCH_NOTHING_RE,\n  IDENT_RE: IDENT_RE,\n  UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,\n  NUMBER_RE: NUMBER_RE,\n  C_NUMBER_RE: C_NUMBER_RE,\n  BINARY_NUMBER_RE: BINARY_NUMBER_RE,\n  RE_STARTERS_RE: RE_STARTERS_RE,\n  SHEBANG: SHEBANG,\n  BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,\n  APOS_STRING_MODE: APOS_STRING_MODE,\n  QUOTE_STRING_MODE: QUOTE_STRING_MODE,\n  PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,\n  COMMENT: COMMENT,\n  C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,\n  C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,\n  HASH_COMMENT_MODE: HASH_COMMENT_MODE,\n  NUMBER_MODE: NUMBER_MODE,\n  C_NUMBER_MODE: C_NUMBER_MODE,\n  BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,\n  REGEXP_MODE: REGEXP_MODE,\n  TITLE_MODE: TITLE_MODE,\n  UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,\n  METHOD_GUARD: METHOD_GUARD,\n  END_SAME_AS_BEGIN: END_SAME_AS_BEGIN\n});\n\n/**\n@typedef {import('highlight.js').CallbackResponse} CallbackResponse\n@typedef {import('highlight.js').CompilerExt} CompilerExt\n*/\n\n// Grammar extensions / plugins\n// See: https://github.com/highlightjs/highlight.js/issues/2833\n\n// Grammar extensions allow \"syntactic sugar\" to be added to the grammar modes\n// without requiring any underlying changes to the compiler internals.\n\n// `compileMatch` being the perfect small example of now allowing a grammar\n// author to write `match` when they desire to match a single expression rather\n// than being forced to use `begin`.  The extension then just moves `match` into\n// `begin` when it runs.  Ie, no features have been added, but we've just made\n// the experience of writing (and reading grammars) a little bit nicer.\n\n// ------\n\n// TODO: We need negative look-behind support to do this properly\n/**\n * Skip a match if it has a preceding dot\n *\n * This is used for `beginKeywords` to prevent matching expressions such as\n * `bob.keyword.do()`. The mode compiler automatically wires this up as a\n * special _internal_ 'on:begin' callback for modes with `beginKeywords`\n * @param {RegExpMatchArray} match\n * @param {CallbackResponse} response\n */\nfunction skipIfHasPrecedingDot(match, response) {\n  const before = match.input[match.index - 1];\n  if (before === \".\") {\n    response.ignoreMatch();\n  }\n}\n\n/**\n *\n * @type {CompilerExt}\n */\nfunction scopeClassName(mode, _parent) {\n  // eslint-disable-next-line no-undefined\n  if (mode.className !== undefined) {\n    mode.scope = mode.className;\n    delete mode.className;\n  }\n}\n\n/**\n * `beginKeywords` syntactic sugar\n * @type {CompilerExt}\n */\nfunction beginKeywords(mode, parent) {\n  if (!parent) return;\n  if (!mode.beginKeywords) return;\n\n  // for languages with keywords that include non-word characters checking for\n  // a word boundary is not sufficient, so instead we check for a word boundary\n  // or whitespace - this does no harm in any case since our keyword engine\n  // doesn't allow spaces in keywords anyways and we still check for the boundary\n  // first\n  mode.begin = '\\\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\\\.)(?=\\\\b|\\\\s)';\n  mode.__beforeBegin = skipIfHasPrecedingDot;\n  mode.keywords = mode.keywords || mode.beginKeywords;\n  delete mode.beginKeywords;\n\n  // prevents double relevance, the keywords themselves provide\n  // relevance, the mode doesn't need to double it\n  // eslint-disable-next-line no-undefined\n  if (mode.relevance === undefined) mode.relevance = 0;\n}\n\n/**\n * Allow `illegal` to contain an array of illegal values\n * @type {CompilerExt}\n */\nfunction compileIllegal(mode, _parent) {\n  if (!Array.isArray(mode.illegal)) return;\n\n  mode.illegal = either(...mode.illegal);\n}\n\n/**\n * `match` to match a single expression for readability\n * @type {CompilerExt}\n */\nfunction compileMatch(mode, _parent) {\n  if (!mode.match) return;\n  if (mode.begin || mode.end) throw new Error(\"begin & end are not supported with match\");\n\n  mode.begin = mode.match;\n  delete mode.match;\n}\n\n/**\n * provides the default 1 relevance to all modes\n * @type {CompilerExt}\n */\nfunction compileRelevance(mode, _parent) {\n  // eslint-disable-next-line no-undefined\n  if (mode.relevance === undefined) mode.relevance = 1;\n}\n\n// allow beforeMatch to act as a \"qualifier\" for the match\n// the full match begin must be [beforeMatch][begin]\nconst beforeMatchExt = (mode, parent) => {\n  if (!mode.beforeMatch) return;\n  // starts conflicts with endsParent which we need to make sure the child\n  // rule is not matched multiple times\n  if (mode.starts) throw new Error(\"beforeMatch cannot be used with starts\");\n\n  const originalMode = Object.assign({}, mode);\n  Object.keys(mode).forEach((key) => { delete mode[key]; });\n\n  mode.keywords = originalMode.keywords;\n  mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));\n  mode.starts = {\n    relevance: 0,\n    contains: [\n      Object.assign(originalMode, { endsParent: true })\n    ]\n  };\n  mode.relevance = 0;\n\n  delete originalMode.beforeMatch;\n};\n\n// keywords that should have no default relevance value\nconst COMMON_KEYWORDS = [\n  'of',\n  'and',\n  'for',\n  'in',\n  'not',\n  'or',\n  'if',\n  'then',\n  'parent', // common variable name\n  'list', // common variable name\n  'value' // common variable name\n];\n\nconst DEFAULT_KEYWORD_SCOPE = \"keyword\";\n\n/**\n * Given raw keywords from a language definition, compile them.\n *\n * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords\n * @param {boolean} caseInsensitive\n */\nfunction compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {\n  /** @type {import(\"highlight.js/private\").KeywordDict} */\n  const compiledKeywords = Object.create(null);\n\n  // input can be a string of keywords, an array of keywords, or a object with\n  // named keys representing scopeName (which can then point to a string or array)\n  if (typeof rawKeywords === 'string') {\n    compileList(scopeName, rawKeywords.split(\" \"));\n  } else if (Array.isArray(rawKeywords)) {\n    compileList(scopeName, rawKeywords);\n  } else {\n    Object.keys(rawKeywords).forEach(function(scopeName) {\n      // collapse all our objects back into the parent object\n      Object.assign(\n        compiledKeywords,\n        compileKeywords(rawKeywords[scopeName], caseInsensitive, scopeName)\n      );\n    });\n  }\n  return compiledKeywords;\n\n  // ---\n\n  /**\n   * Compiles an individual list of keywords\n   *\n   * Ex: \"for if when while|5\"\n   *\n   * @param {string} scopeName\n   * @param {Array<string>} keywordList\n   */\n  function compileList(scopeName, keywordList) {\n    if (caseInsensitive) {\n      keywordList = keywordList.map(x => x.toLowerCase());\n    }\n    keywordList.forEach(function(keyword) {\n      const pair = keyword.split('|');\n      compiledKeywords[pair[0]] = [scopeName, scoreForKeyword(pair[0], pair[1])];\n    });\n  }\n}\n\n/**\n * Returns the proper score for a given keyword\n *\n * Also takes into account comment keywords, which will be scored 0 UNLESS\n * another score has been manually assigned.\n * @param {string} keyword\n * @param {string} [providedScore]\n */\nfunction scoreForKeyword(keyword, providedScore) {\n  // manual scores always win over common keywords\n  // so you can force a score of 1 if you really insist\n  if (providedScore) {\n    return Number(providedScore);\n  }\n\n  return commonKeyword(keyword) ? 0 : 1;\n}\n\n/**\n * Determines if a given keyword is common or not\n *\n * @param {string} keyword */\nfunction commonKeyword(keyword) {\n  return COMMON_KEYWORDS.includes(keyword.toLowerCase());\n}\n\n/*\n\nFor the reasoning behind this please see:\nhttps://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419\n\n*/\n\n/**\n * @type {Record<string, boolean>}\n */\nconst seenDeprecations = {};\n\n/**\n * @param {string} message\n */\nconst error = (message) => {\n  console.error(message);\n};\n\n/**\n * @param {string} message\n * @param {any} args\n */\nconst warn = (message, ...args) => {\n  console.log(`WARN: ${message}`, ...args);\n};\n\n/**\n * @param {string} version\n * @param {string} message\n */\nconst deprecated = (version, message) => {\n  if (seenDeprecations[`${version}/${message}`]) return;\n\n  console.log(`Deprecated as of ${version}. ${message}`);\n  seenDeprecations[`${version}/${message}`] = true;\n};\n\n/* eslint-disable no-throw-literal */\n\n/**\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n*/\n\nconst MultiClassError = new Error();\n\n/**\n * Renumbers labeled scope names to account for additional inner match\n * groups that otherwise would break everything.\n *\n * Lets say we 3 match scopes:\n *\n *   { 1 => ..., 2 => ..., 3 => ... }\n *\n * So what we need is a clean match like this:\n *\n *   (a)(b)(c) => [ \"a\", \"b\", \"c\" ]\n *\n * But this falls apart with inner match groups:\n *\n * (a)(((b)))(c) => [\"a\", \"b\", \"b\", \"b\", \"c\" ]\n *\n * Our scopes are now \"out of alignment\" and we're repeating `b` 3 times.\n * What needs to happen is the numbers are remapped:\n *\n *   { 1 => ..., 2 => ..., 5 => ... }\n *\n * We also need to know that the ONLY groups that should be output\n * are 1, 2, and 5.  This function handles this behavior.\n *\n * @param {CompiledMode} mode\n * @param {Array<RegExp | string>} regexes\n * @param {{key: \"beginScope\"|\"endScope\"}} opts\n */\nfunction remapScopeNames(mode, regexes, { key }) {\n  let offset = 0;\n  const scopeNames = mode[key];\n  /** @type Record<number,boolean> */\n  const emit = {};\n  /** @type Record<number,string> */\n  const positions = {};\n\n  for (let i = 1; i <= regexes.length; i++) {\n    positions[i + offset] = scopeNames[i];\n    emit[i + offset] = true;\n    offset += countMatchGroups(regexes[i - 1]);\n  }\n  // we use _emit to keep track of which match groups are \"top-level\" to avoid double\n  // output from inside match groups\n  mode[key] = positions;\n  mode[key]._emit = emit;\n  mode[key]._multi = true;\n}\n\n/**\n * @param {CompiledMode} mode\n */\nfunction beginMultiClass(mode) {\n  if (!Array.isArray(mode.begin)) return;\n\n  if (mode.skip || mode.excludeBegin || mode.returnBegin) {\n    error(\"skip, excludeBegin, returnBegin not compatible with beginScope: {}\");\n    throw MultiClassError;\n  }\n\n  if (typeof mode.beginScope !== \"object\" || mode.beginScope === null) {\n    error(\"beginScope must be object\");\n    throw MultiClassError;\n  }\n\n  remapScopeNames(mode, mode.begin, { key: \"beginScope\" });\n  mode.begin = _rewriteBackreferences(mode.begin, { joinWith: \"\" });\n}\n\n/**\n * @param {CompiledMode} mode\n */\nfunction endMultiClass(mode) {\n  if (!Array.isArray(mode.end)) return;\n\n  if (mode.skip || mode.excludeEnd || mode.returnEnd) {\n    error(\"skip, excludeEnd, returnEnd not compatible with endScope: {}\");\n    throw MultiClassError;\n  }\n\n  if (typeof mode.endScope !== \"object\" || mode.endScope === null) {\n    error(\"endScope must be object\");\n    throw MultiClassError;\n  }\n\n  remapScopeNames(mode, mode.end, { key: \"endScope\" });\n  mode.end = _rewriteBackreferences(mode.end, { joinWith: \"\" });\n}\n\n/**\n * this exists only to allow `scope: {}` to be used beside `match:`\n * Otherwise `beginScope` would necessary and that would look weird\n\n  {\n    match: [ /def/, /\\w+/ ]\n    scope: { 1: \"keyword\" , 2: \"title\" }\n  }\n\n * @param {CompiledMode} mode\n */\nfunction scopeSugar(mode) {\n  if (mode.scope && typeof mode.scope === \"object\" && mode.scope !== null) {\n    mode.beginScope = mode.scope;\n    delete mode.scope;\n  }\n}\n\n/**\n * @param {CompiledMode} mode\n */\nfunction MultiClass(mode) {\n  scopeSugar(mode);\n\n  if (typeof mode.beginScope === \"string\") {\n    mode.beginScope = { _wrap: mode.beginScope };\n  }\n  if (typeof mode.endScope === \"string\") {\n    mode.endScope = { _wrap: mode.endScope };\n  }\n\n  beginMultiClass(mode);\n  endMultiClass(mode);\n}\n\n/**\n@typedef {import('highlight.js').Mode} Mode\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n@typedef {import('highlight.js').Language} Language\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\n@typedef {import('highlight.js').CompiledLanguage} CompiledLanguage\n*/\n\n// compilation\n\n/**\n * Compiles a language definition result\n *\n * Given the raw result of a language definition (Language), compiles this so\n * that it is ready for highlighting code.\n * @param {Language} language\n * @returns {CompiledLanguage}\n */\nfunction compileLanguage(language) {\n  /**\n   * Builds a regex with the case sensitivity of the current language\n   *\n   * @param {RegExp | string} value\n   * @param {boolean} [global]\n   */\n  function langRe(value, global) {\n    return new RegExp(\n      source(value),\n      'm'\n      + (language.case_insensitive ? 'i' : '')\n      + (language.unicodeRegex ? 'u' : '')\n      + (global ? 'g' : '')\n    );\n  }\n\n  /**\n    Stores multiple regular expressions and allows you to quickly search for\n    them all in a string simultaneously - returning the first match.  It does\n    this by creating a huge (a|b|c) regex - each individual item wrapped with ()\n    and joined by `|` - using match groups to track position.  When a match is\n    found checking which position in the array has content allows us to figure\n    out which of the original regexes / match groups triggered the match.\n\n    The match object itself (the result of `Regex.exec`) is returned but also\n    enhanced by merging in any meta-data that was registered with the regex.\n    This is how we keep track of which mode matched, and what type of rule\n    (`illegal`, `begin`, end, etc).\n  */\n  class MultiRegex {\n    constructor() {\n      this.matchIndexes = {};\n      // @ts-ignore\n      this.regexes = [];\n      this.matchAt = 1;\n      this.position = 0;\n    }\n\n    // @ts-ignore\n    addRule(re, opts) {\n      opts.position = this.position++;\n      // @ts-ignore\n      this.matchIndexes[this.matchAt] = opts;\n      this.regexes.push([opts, re]);\n      this.matchAt += countMatchGroups(re) + 1;\n    }\n\n    compile() {\n      if (this.regexes.length === 0) {\n        // avoids the need to check length every time exec is called\n        // @ts-ignore\n        this.exec = () => null;\n      }\n      const terminators = this.regexes.map(el => el[1]);\n      this.matcherRe = langRe(_rewriteBackreferences(terminators, { joinWith: '|' }), true);\n      this.lastIndex = 0;\n    }\n\n    /** @param {string} s */\n    exec(s) {\n      this.matcherRe.lastIndex = this.lastIndex;\n      const match = this.matcherRe.exec(s);\n      if (!match) { return null; }\n\n      // eslint-disable-next-line no-undefined\n      const i = match.findIndex((el, i) => i > 0 && el !== undefined);\n      // @ts-ignore\n      const matchData = this.matchIndexes[i];\n      // trim off any earlier non-relevant match groups (ie, the other regex\n      // match groups that make up the multi-matcher)\n      match.splice(0, i);\n\n      return Object.assign(match, matchData);\n    }\n  }\n\n  /*\n    Created to solve the key deficiently with MultiRegex - there is no way to\n    test for multiple matches at a single location.  Why would we need to do\n    that?  In the future a more dynamic engine will allow certain matches to be\n    ignored.  An example: if we matched say the 3rd regex in a large group but\n    decided to ignore it - we'd need to started testing again at the 4th\n    regex... but MultiRegex itself gives us no real way to do that.\n\n    So what this class creates MultiRegexs on the fly for whatever search\n    position they are needed.\n\n    NOTE: These additional MultiRegex objects are created dynamically.  For most\n    grammars most of the time we will never actually need anything more than the\n    first MultiRegex - so this shouldn't have too much overhead.\n\n    Say this is our search group, and we match regex3, but wish to ignore it.\n\n      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0\n\n    What we need is a new MultiRegex that only includes the remaining\n    possibilities:\n\n      regex4 | regex5                               ' ie, startAt = 3\n\n    This class wraps all that complexity up in a simple API... `startAt` decides\n    where in the array of expressions to start doing the matching. It\n    auto-increments, so if a match is found at position 2, then startAt will be\n    set to 3.  If the end is reached startAt will return to 0.\n\n    MOST of the time the parser will be setting startAt manually to 0.\n  */\n  class ResumableMultiRegex {\n    constructor() {\n      // @ts-ignore\n      this.rules = [];\n      // @ts-ignore\n      this.multiRegexes = [];\n      this.count = 0;\n\n      this.lastIndex = 0;\n      this.regexIndex = 0;\n    }\n\n    // @ts-ignore\n    getMatcher(index) {\n      if (this.multiRegexes[index]) return this.multiRegexes[index];\n\n      const matcher = new MultiRegex();\n      this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));\n      matcher.compile();\n      this.multiRegexes[index] = matcher;\n      return matcher;\n    }\n\n    resumingScanAtSamePosition() {\n      return this.regexIndex !== 0;\n    }\n\n    considerAll() {\n      this.regexIndex = 0;\n    }\n\n    // @ts-ignore\n    addRule(re, opts) {\n      this.rules.push([re, opts]);\n      if (opts.type === \"begin\") this.count++;\n    }\n\n    /** @param {string} s */\n    exec(s) {\n      const m = this.getMatcher(this.regexIndex);\n      m.lastIndex = this.lastIndex;\n      let result = m.exec(s);\n\n      // The following is because we have no easy way to say \"resume scanning at the\n      // existing position but also skip the current rule ONLY\". What happens is\n      // all prior rules are also skipped which can result in matching the wrong\n      // thing. Example of matching \"booger\":\n\n      // our matcher is [string, \"booger\", number]\n      //\n      // ....booger....\n\n      // if \"booger\" is ignored then we'd really need a regex to scan from the\n      // SAME position for only: [string, number] but ignoring \"booger\" (if it\n      // was the first match), a simple resume would scan ahead who knows how\n      // far looking only for \"number\", ignoring potential string matches (or\n      // future \"booger\" matches that might be valid.)\n\n      // So what we do: We execute two matchers, one resuming at the same\n      // position, but the second full matcher starting at the position after:\n\n      //     /--- resume first regex match here (for [number])\n      //     |/---- full match here for [string, \"booger\", number]\n      //     vv\n      // ....booger....\n\n      // Which ever results in a match first is then used. So this 3-4 step\n      // process essentially allows us to say \"match at this position, excluding\n      // a prior rule that was ignored\".\n      //\n      // 1. Match \"booger\" first, ignore. Also proves that [string] does non match.\n      // 2. Resume matching for [number]\n      // 3. Match at index + 1 for [string, \"booger\", number]\n      // 4. If #2 and #3 result in matches, which came first?\n      if (this.resumingScanAtSamePosition()) {\n        if (result && result.index === this.lastIndex) ; else { // use the second matcher result\n          const m2 = this.getMatcher(0);\n          m2.lastIndex = this.lastIndex + 1;\n          result = m2.exec(s);\n        }\n      }\n\n      if (result) {\n        this.regexIndex += result.position + 1;\n        if (this.regexIndex === this.count) {\n          // wrap-around to considering all matches again\n          this.considerAll();\n        }\n      }\n\n      return result;\n    }\n  }\n\n  /**\n   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk\n   * the content and find matches.\n   *\n   * @param {CompiledMode} mode\n   * @returns {ResumableMultiRegex}\n   */\n  function buildModeRegex(mode) {\n    const mm = new ResumableMultiRegex();\n\n    mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: \"begin\" }));\n\n    if (mode.terminatorEnd) {\n      mm.addRule(mode.terminatorEnd, { type: \"end\" });\n    }\n    if (mode.illegal) {\n      mm.addRule(mode.illegal, { type: \"illegal\" });\n    }\n\n    return mm;\n  }\n\n  /** skip vs abort vs ignore\n   *\n   * @skip   - The mode is still entered and exited normally (and contains rules apply),\n   *           but all content is held and added to the parent buffer rather than being\n   *           output when the mode ends.  Mostly used with `sublanguage` to build up\n   *           a single large buffer than can be parsed by sublanguage.\n   *\n   *             - The mode begin ands ends normally.\n   *             - Content matched is added to the parent mode buffer.\n   *             - The parser cursor is moved forward normally.\n   *\n   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it\n   *           never matched) but DOES NOT continue to match subsequent `contains`\n   *           modes.  Abort is bad/suboptimal because it can result in modes\n   *           farther down not getting applied because an earlier rule eats the\n   *           content but then aborts.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is added to the mode buffer.\n   *             - The parser cursor is moved forward accordingly.\n   *\n   * @ignore - Ignores the mode (as if it never matched) and continues to match any\n   *           subsequent `contains` modes.  Ignore isn't technically possible with\n   *           the current parser implementation.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is ignored.\n   *             - The parser cursor is not moved forward.\n   */\n\n  /**\n   * Compiles an individual mode\n   *\n   * This can raise an error if the mode contains certain detectable known logic\n   * issues.\n   * @param {Mode} mode\n   * @param {CompiledMode | null} [parent]\n   * @returns {CompiledMode | never}\n   */\n  function compileMode(mode, parent) {\n    const cmode = /** @type CompiledMode */ (mode);\n    if (mode.isCompiled) return cmode;\n\n    [\n      scopeClassName,\n      // do this early so compiler extensions generally don't have to worry about\n      // the distinction between match/begin\n      compileMatch,\n      MultiClass,\n      beforeMatchExt\n    ].forEach(ext => ext(mode, parent));\n\n    language.compilerExtensions.forEach(ext => ext(mode, parent));\n\n    // __beforeBegin is considered private API, internal use only\n    mode.__beforeBegin = null;\n\n    [\n      beginKeywords,\n      // do this later so compiler extensions that come earlier have access to the\n      // raw array if they wanted to perhaps manipulate it, etc.\n      compileIllegal,\n      // default to 1 relevance if not specified\n      compileRelevance\n    ].forEach(ext => ext(mode, parent));\n\n    mode.isCompiled = true;\n\n    let keywordPattern = null;\n    if (typeof mode.keywords === \"object\" && mode.keywords.$pattern) {\n      // we need a copy because keywords might be compiled multiple times\n      // so we can't go deleting $pattern from the original on the first\n      // pass\n      mode.keywords = Object.assign({}, mode.keywords);\n      keywordPattern = mode.keywords.$pattern;\n      delete mode.keywords.$pattern;\n    }\n    keywordPattern = keywordPattern || /\\w+/;\n\n    if (mode.keywords) {\n      mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);\n    }\n\n    cmode.keywordPatternRe = langRe(keywordPattern, true);\n\n    if (parent) {\n      if (!mode.begin) mode.begin = /\\B|\\b/;\n      cmode.beginRe = langRe(cmode.begin);\n      if (!mode.end && !mode.endsWithParent) mode.end = /\\B|\\b/;\n      if (mode.end) cmode.endRe = langRe(cmode.end);\n      cmode.terminatorEnd = source(cmode.end) || '';\n      if (mode.endsWithParent && parent.terminatorEnd) {\n        cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;\n      }\n    }\n    if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ (mode.illegal));\n    if (!mode.contains) mode.contains = [];\n\n    mode.contains = [].concat(...mode.contains.map(function(c) {\n      return expandOrCloneMode(c === 'self' ? mode : c);\n    }));\n    mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });\n\n    if (mode.starts) {\n      compileMode(mode.starts, parent);\n    }\n\n    cmode.matcher = buildModeRegex(cmode);\n    return cmode;\n  }\n\n  if (!language.compilerExtensions) language.compilerExtensions = [];\n\n  // self is not valid at the top-level\n  if (language.contains && language.contains.includes('self')) {\n    throw new Error(\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\");\n  }\n\n  // we need a null object, which inherit will guarantee\n  language.classNameAliases = inherit$1(language.classNameAliases || {});\n\n  return compileMode(/** @type Mode */ (language));\n}\n\n/**\n * Determines if a mode has a dependency on it's parent or not\n *\n * If a mode does have a parent dependency then often we need to clone it if\n * it's used in multiple places so that each copy points to the correct parent,\n * where-as modes without a parent can often safely be re-used at the bottom of\n * a mode chain.\n *\n * @param {Mode | null} mode\n * @returns {boolean} - is there a dependency on the parent?\n * */\nfunction dependencyOnParent(mode) {\n  if (!mode) return false;\n\n  return mode.endsWithParent || dependencyOnParent(mode.starts);\n}\n\n/**\n * Expands a mode or clones it if necessary\n *\n * This is necessary for modes with parental dependenceis (see notes on\n * `dependencyOnParent`) and for nodes that have `variants` - which must then be\n * exploded into their own individual modes at compile time.\n *\n * @param {Mode} mode\n * @returns {Mode | Mode[]}\n * */\nfunction expandOrCloneMode(mode) {\n  if (mode.variants && !mode.cachedVariants) {\n    mode.cachedVariants = mode.variants.map(function(variant) {\n      return inherit$1(mode, { variants: null }, variant);\n    });\n  }\n\n  // EXPAND\n  // if we have variants then essentially \"replace\" the mode with the variants\n  // this happens in compileMode, where this function is called from\n  if (mode.cachedVariants) {\n    return mode.cachedVariants;\n  }\n\n  // CLONE\n  // if we have dependencies on parents then we need a unique\n  // instance of ourselves, so we can be reused with many\n  // different parents without issue\n  if (dependencyOnParent(mode)) {\n    return inherit$1(mode, { starts: mode.starts ? inherit$1(mode.starts) : null });\n  }\n\n  if (Object.isFrozen(mode)) {\n    return inherit$1(mode);\n  }\n\n  // no special dependency issues, just return ourselves\n  return mode;\n}\n\nvar version = \"11.8.0\";\n\nclass HTMLInjectionError extends Error {\n  constructor(reason, html) {\n    super(reason);\n    this.name = \"HTMLInjectionError\";\n    this.html = html;\n  }\n}\n\n/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/\n\n\n/**\n@typedef {import('highlight.js').Mode} Mode\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n@typedef {import('highlight.js').CompiledScope} CompiledScope\n@typedef {import('highlight.js').Language} Language\n@typedef {import('highlight.js').HLJSApi} HLJSApi\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\n@typedef {import('highlight.js').PluginEvent} PluginEvent\n@typedef {import('highlight.js').HLJSOptions} HLJSOptions\n@typedef {import('highlight.js').LanguageFn} LanguageFn\n@typedef {import('highlight.js').HighlightedHTMLElement} HighlightedHTMLElement\n@typedef {import('highlight.js').BeforeHighlightContext} BeforeHighlightContext\n@typedef {import('highlight.js/private').MatchType} MatchType\n@typedef {import('highlight.js/private').KeywordData} KeywordData\n@typedef {import('highlight.js/private').EnhancedMatch} EnhancedMatch\n@typedef {import('highlight.js/private').AnnotatedError} AnnotatedError\n@typedef {import('highlight.js').AutoHighlightResult} AutoHighlightResult\n@typedef {import('highlight.js').HighlightOptions} HighlightOptions\n@typedef {import('highlight.js').HighlightResult} HighlightResult\n*/\n\n\nconst escape = escapeHTML;\nconst inherit = inherit$1;\nconst NO_MATCH = Symbol(\"nomatch\");\nconst MAX_KEYWORD_HITS = 7;\n\n/**\n * @param {any} hljs - object that is extended (legacy)\n * @returns {HLJSApi}\n */\nconst HLJS = function(hljs) {\n  // Global internal variables used within the highlight.js library.\n  /** @type {Record<string, Language>} */\n  const languages = Object.create(null);\n  /** @type {Record<string, string>} */\n  const aliases = Object.create(null);\n  /** @type {HLJSPlugin[]} */\n  const plugins = [];\n\n  // safe/production mode - swallows more errors, tries to keep running\n  // even if a single syntax or parse hits a fatal error\n  let SAFE_MODE = true;\n  const LANGUAGE_NOT_FOUND = \"Could not find the language '{}', did you forget to load/include a language module?\";\n  /** @type {Language} */\n  const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };\n\n  // Global options used when within external APIs. This is modified when\n  // calling the `hljs.configure` function.\n  /** @type HLJSOptions */\n  let options = {\n    ignoreUnescapedHTML: false,\n    throwUnescapedHTML: false,\n    noHighlightRe: /^(no-?highlight)$/i,\n    languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i,\n    classPrefix: 'hljs-',\n    cssSelector: 'pre code',\n    languages: null,\n    // beta configuration options, subject to change, welcome to discuss\n    // https://github.com/highlightjs/highlight.js/issues/1086\n    __emitter: TokenTreeEmitter\n  };\n\n  /* Utility functions */\n\n  /**\n   * Tests a language name to see if highlighting should be skipped\n   * @param {string} languageName\n   */\n  function shouldNotHighlight(languageName) {\n    return options.noHighlightRe.test(languageName);\n  }\n\n  /**\n   * @param {HighlightedHTMLElement} block - the HTML element to determine language for\n   */\n  function blockLanguage(block) {\n    let classes = block.className + ' ';\n\n    classes += block.parentNode ? block.parentNode.className : '';\n\n    // language-* takes precedence over non-prefixed class names.\n    const match = options.languageDetectRe.exec(classes);\n    if (match) {\n      const language = getLanguage(match[1]);\n      if (!language) {\n        warn(LANGUAGE_NOT_FOUND.replace(\"{}\", match[1]));\n        warn(\"Falling back to no-highlight mode for this block.\", block);\n      }\n      return language ? match[1] : 'no-highlight';\n    }\n\n    return classes\n      .split(/\\s+/)\n      .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));\n  }\n\n  /**\n   * Core highlighting function.\n   *\n   * OLD API\n   * highlight(lang, code, ignoreIllegals, continuation)\n   *\n   * NEW API\n   * highlight(code, {lang, ignoreIllegals})\n   *\n   * @param {string} codeOrLanguageName - the language to use for highlighting\n   * @param {string | HighlightOptions} optionsOrCode - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   *\n   * @returns {HighlightResult} Result - an object that represents the result\n   * @property {string} language - the language name\n   * @property {number} relevance - the relevance score\n   * @property {string} value - the highlighted HTML code\n   * @property {string} code - the original raw code\n   * @property {CompiledMode} top - top of the current mode stack\n   * @property {boolean} illegal - indicates whether any illegal matches were found\n  */\n  function highlight(codeOrLanguageName, optionsOrCode, ignoreIllegals) {\n    let code = \"\";\n    let languageName = \"\";\n    if (typeof optionsOrCode === \"object\") {\n      code = codeOrLanguageName;\n      ignoreIllegals = optionsOrCode.ignoreIllegals;\n      languageName = optionsOrCode.language;\n    } else {\n      // old API\n      deprecated(\"10.7.0\", \"highlight(lang, code, ...args) has been deprecated.\");\n      deprecated(\"10.7.0\", \"Please use highlight(code, options) instead.\\nhttps://github.com/highlightjs/highlight.js/issues/2277\");\n      languageName = codeOrLanguageName;\n      code = optionsOrCode;\n    }\n\n    // https://github.com/highlightjs/highlight.js/issues/3149\n    // eslint-disable-next-line no-undefined\n    if (ignoreIllegals === undefined) { ignoreIllegals = true; }\n\n    /** @type {BeforeHighlightContext} */\n    const context = {\n      code,\n      language: languageName\n    };\n    // the plugin can change the desired language or the code to be highlighted\n    // just be changing the object it was passed\n    fire(\"before:highlight\", context);\n\n    // a before plugin can usurp the result completely by providing it's own\n    // in which case we don't even need to call highlight\n    const result = context.result\n      ? context.result\n      : _highlight(context.language, context.code, ignoreIllegals);\n\n    result.code = context.code;\n    // the plugin can change anything in result to suite it\n    fire(\"after:highlight\", result);\n\n    return result;\n  }\n\n  /**\n   * private highlight that's used internally and does not fire callbacks\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} codeToHighlight - the code to highlight\n   * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {CompiledMode?} [continuation] - current continuation mode, if any\n   * @returns {HighlightResult} - result of the highlight operation\n  */\n  function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {\n    const keywordHits = Object.create(null);\n\n    /**\n     * Return keyword data if a match is a keyword\n     * @param {CompiledMode} mode - current mode\n     * @param {string} matchText - the textual match\n     * @returns {KeywordData | false}\n     */\n    function keywordData(mode, matchText) {\n      return mode.keywords[matchText];\n    }\n\n    function processKeywords() {\n      if (!top.keywords) {\n        emitter.addText(modeBuffer);\n        return;\n      }\n\n      let lastIndex = 0;\n      top.keywordPatternRe.lastIndex = 0;\n      let match = top.keywordPatternRe.exec(modeBuffer);\n      let buf = \"\";\n\n      while (match) {\n        buf += modeBuffer.substring(lastIndex, match.index);\n        const word = language.case_insensitive ? match[0].toLowerCase() : match[0];\n        const data = keywordData(top, word);\n        if (data) {\n          const [kind, keywordRelevance] = data;\n          emitter.addText(buf);\n          buf = \"\";\n\n          keywordHits[word] = (keywordHits[word] || 0) + 1;\n          if (keywordHits[word] <= MAX_KEYWORD_HITS) relevance += keywordRelevance;\n          if (kind.startsWith(\"_\")) {\n            // _ implied for relevance only, do not highlight\n            // by applying a class name\n            buf += match[0];\n          } else {\n            const cssClass = language.classNameAliases[kind] || kind;\n            emitKeyword(match[0], cssClass);\n          }\n        } else {\n          buf += match[0];\n        }\n        lastIndex = top.keywordPatternRe.lastIndex;\n        match = top.keywordPatternRe.exec(modeBuffer);\n      }\n      buf += modeBuffer.substring(lastIndex);\n      emitter.addText(buf);\n    }\n\n    function processSubLanguage() {\n      if (modeBuffer === \"\") return;\n      /** @type HighlightResult */\n      let result = null;\n\n      if (typeof top.subLanguage === 'string') {\n        if (!languages[top.subLanguage]) {\n          emitter.addText(modeBuffer);\n          return;\n        }\n        result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);\n        continuations[top.subLanguage] = /** @type {CompiledMode} */ (result._top);\n      } else {\n        result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);\n      }\n\n      // Counting embedded language score towards the host language may be disabled\n      // with zeroing the containing mode relevance. Use case in point is Markdown that\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n      // score.\n      if (top.relevance > 0) {\n        relevance += result.relevance;\n      }\n      emitter.__addSublanguage(result._emitter, result.language);\n    }\n\n    function processBuffer() {\n      if (top.subLanguage != null) {\n        processSubLanguage();\n      } else {\n        processKeywords();\n      }\n      modeBuffer = '';\n    }\n\n    /**\n     * @param {string} text\n     * @param {string} scope\n     */\n    function emitKeyword(keyword, scope) {\n      if (keyword === \"\") return;\n\n      emitter.startScope(scope);\n      emitter.addText(keyword);\n      emitter.endScope();\n    }\n\n    /**\n     * @param {CompiledScope} scope\n     * @param {RegExpMatchArray} match\n     */\n    function emitMultiClass(scope, match) {\n      let i = 1;\n      const max = match.length - 1;\n      while (i <= max) {\n        if (!scope._emit[i]) { i++; continue; }\n        const klass = language.classNameAliases[scope[i]] || scope[i];\n        const text = match[i];\n        if (klass) {\n          emitKeyword(text, klass);\n        } else {\n          modeBuffer = text;\n          processKeywords();\n          modeBuffer = \"\";\n        }\n        i++;\n      }\n    }\n\n    /**\n     * @param {CompiledMode} mode - new mode to start\n     * @param {RegExpMatchArray} match\n     */\n    function startNewMode(mode, match) {\n      if (mode.scope && typeof mode.scope === \"string\") {\n        emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);\n      }\n      if (mode.beginScope) {\n        // beginScope just wraps the begin match itself in a scope\n        if (mode.beginScope._wrap) {\n          emitKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);\n          modeBuffer = \"\";\n        } else if (mode.beginScope._multi) {\n          // at this point modeBuffer should just be the match\n          emitMultiClass(mode.beginScope, match);\n          modeBuffer = \"\";\n        }\n      }\n\n      top = Object.create(mode, { parent: { value: top } });\n      return top;\n    }\n\n    /**\n     * @param {CompiledMode } mode - the mode to potentially end\n     * @param {RegExpMatchArray} match - the latest match\n     * @param {string} matchPlusRemainder - match plus remainder of content\n     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode\n     */\n    function endOfMode(mode, match, matchPlusRemainder) {\n      let matched = startsWith(mode.endRe, matchPlusRemainder);\n\n      if (matched) {\n        if (mode[\"on:end\"]) {\n          const resp = new Response(mode);\n          mode[\"on:end\"](match, resp);\n          if (resp.isMatchIgnored) matched = false;\n        }\n\n        if (matched) {\n          while (mode.endsParent && mode.parent) {\n            mode = mode.parent;\n          }\n          return mode;\n        }\n      }\n      // even if on:end fires an `ignore` it's still possible\n      // that we might trigger the end node because of a parent mode\n      if (mode.endsWithParent) {\n        return endOfMode(mode.parent, match, matchPlusRemainder);\n      }\n    }\n\n    /**\n     * Handle matching but then ignoring a sequence of text\n     *\n     * @param {string} lexeme - string containing full match text\n     */\n    function doIgnore(lexeme) {\n      if (top.matcher.regexIndex === 0) {\n        // no more regexes to potentially match here, so we move the cursor forward one\n        // space\n        modeBuffer += lexeme[0];\n        return 1;\n      } else {\n        // no need to move the cursor, we still have additional regexes to try and\n        // match at this very spot\n        resumeScanAtSamePosition = true;\n        return 0;\n      }\n    }\n\n    /**\n     * Handle the start of a new potential mode match\n     *\n     * @param {EnhancedMatch} match - the current match\n     * @returns {number} how far to advance the parse cursor\n     */\n    function doBeginMatch(match) {\n      const lexeme = match[0];\n      const newMode = match.rule;\n\n      const resp = new Response(newMode);\n      // first internal before callbacks, then the public ones\n      const beforeCallbacks = [newMode.__beforeBegin, newMode[\"on:begin\"]];\n      for (const cb of beforeCallbacks) {\n        if (!cb) continue;\n        cb(match, resp);\n        if (resp.isMatchIgnored) return doIgnore(lexeme);\n      }\n\n      if (newMode.skip) {\n        modeBuffer += lexeme;\n      } else {\n        if (newMode.excludeBegin) {\n          modeBuffer += lexeme;\n        }\n        processBuffer();\n        if (!newMode.returnBegin && !newMode.excludeBegin) {\n          modeBuffer = lexeme;\n        }\n      }\n      startNewMode(newMode, match);\n      return newMode.returnBegin ? 0 : lexeme.length;\n    }\n\n    /**\n     * Handle the potential end of mode\n     *\n     * @param {RegExpMatchArray} match - the current match\n     */\n    function doEndMatch(match) {\n      const lexeme = match[0];\n      const matchPlusRemainder = codeToHighlight.substring(match.index);\n\n      const endMode = endOfMode(top, match, matchPlusRemainder);\n      if (!endMode) { return NO_MATCH; }\n\n      const origin = top;\n      if (top.endScope && top.endScope._wrap) {\n        processBuffer();\n        emitKeyword(lexeme, top.endScope._wrap);\n      } else if (top.endScope && top.endScope._multi) {\n        processBuffer();\n        emitMultiClass(top.endScope, match);\n      } else if (origin.skip) {\n        modeBuffer += lexeme;\n      } else {\n        if (!(origin.returnEnd || origin.excludeEnd)) {\n          modeBuffer += lexeme;\n        }\n        processBuffer();\n        if (origin.excludeEnd) {\n          modeBuffer = lexeme;\n        }\n      }\n      do {\n        if (top.scope) {\n          emitter.closeNode();\n        }\n        if (!top.skip && !top.subLanguage) {\n          relevance += top.relevance;\n        }\n        top = top.parent;\n      } while (top !== endMode.parent);\n      if (endMode.starts) {\n        startNewMode(endMode.starts, match);\n      }\n      return origin.returnEnd ? 0 : lexeme.length;\n    }\n\n    function processContinuations() {\n      const list = [];\n      for (let current = top; current !== language; current = current.parent) {\n        if (current.scope) {\n          list.unshift(current.scope);\n        }\n      }\n      list.forEach(item => emitter.openNode(item));\n    }\n\n    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */\n    let lastMatch = {};\n\n    /**\n     *  Process an individual match\n     *\n     * @param {string} textBeforeMatch - text preceding the match (since the last match)\n     * @param {EnhancedMatch} [match] - the match itself\n     */\n    function processLexeme(textBeforeMatch, match) {\n      const lexeme = match && match[0];\n\n      // add non-matched text to the current mode buffer\n      modeBuffer += textBeforeMatch;\n\n      if (lexeme == null) {\n        processBuffer();\n        return 0;\n      }\n\n      // we've found a 0 width match and we're stuck, so we need to advance\n      // this happens when we have badly behaved rules that have optional matchers to the degree that\n      // sometimes they can end up matching nothing at all\n      // Ref: https://github.com/highlightjs/highlight.js/issues/2140\n      if (lastMatch.type === \"begin\" && match.type === \"end\" && lastMatch.index === match.index && lexeme === \"\") {\n        // spit the \"skipped\" character that our regex choked on back into the output sequence\n        modeBuffer += codeToHighlight.slice(match.index, match.index + 1);\n        if (!SAFE_MODE) {\n          /** @type {AnnotatedError} */\n          const err = new Error(`0 width match regex (${languageName})`);\n          err.languageName = languageName;\n          err.badRule = lastMatch.rule;\n          throw err;\n        }\n        return 1;\n      }\n      lastMatch = match;\n\n      if (match.type === \"begin\") {\n        return doBeginMatch(match);\n      } else if (match.type === \"illegal\" && !ignoreIllegals) {\n        // illegal match, we do not continue processing\n        /** @type {AnnotatedError} */\n        const err = new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.scope || '<unnamed>') + '\"');\n        err.mode = top;\n        throw err;\n      } else if (match.type === \"end\") {\n        const processed = doEndMatch(match);\n        if (processed !== NO_MATCH) {\n          return processed;\n        }\n      }\n\n      // edge case for when illegal matches $ (end of line) which is technically\n      // a 0 width match but not a begin/end match so it's not caught by the\n      // first handler (when ignoreIllegals is true)\n      if (match.type === \"illegal\" && lexeme === \"\") {\n        // advance so we aren't stuck in an infinite loop\n        return 1;\n      }\n\n      // infinite loops are BAD, this is a last ditch catch all. if we have a\n      // decent number of iterations yet our index (cursor position in our\n      // parsing) still 3x behind our index then something is very wrong\n      // so we bail\n      if (iterations > 100000 && iterations > match.index * 3) {\n        const err = new Error('potential infinite loop, way more iterations than matches');\n        throw err;\n      }\n\n      /*\n      Why might be find ourselves here?  An potential end match that was\n      triggered but could not be completed.  IE, `doEndMatch` returned NO_MATCH.\n      (this could be because a callback requests the match be ignored, etc)\n\n      This causes no real harm other than stopping a few times too many.\n      */\n\n      modeBuffer += lexeme;\n      return lexeme.length;\n    }\n\n    const language = getLanguage(languageName);\n    if (!language) {\n      error(LANGUAGE_NOT_FOUND.replace(\"{}\", languageName));\n      throw new Error('Unknown language: \"' + languageName + '\"');\n    }\n\n    const md = compileLanguage(language);\n    let result = '';\n    /** @type {CompiledMode} */\n    let top = continuation || md;\n    /** @type Record<string,CompiledMode> */\n    const continuations = {}; // keep continuations for sub-languages\n    const emitter = new options.__emitter(options);\n    processContinuations();\n    let modeBuffer = '';\n    let relevance = 0;\n    let index = 0;\n    let iterations = 0;\n    let resumeScanAtSamePosition = false;\n\n    try {\n      if (!language.__emitTokens) {\n        top.matcher.considerAll();\n\n        for (;;) {\n          iterations++;\n          if (resumeScanAtSamePosition) {\n            // only regexes not matched previously will now be\n            // considered for a potential match\n            resumeScanAtSamePosition = false;\n          } else {\n            top.matcher.considerAll();\n          }\n          top.matcher.lastIndex = index;\n\n          const match = top.matcher.exec(codeToHighlight);\n          // console.log(\"match\", match[0], match.rule && match.rule.begin)\n\n          if (!match) break;\n\n          const beforeMatch = codeToHighlight.substring(index, match.index);\n          const processedCount = processLexeme(beforeMatch, match);\n          index = match.index + processedCount;\n        }\n        processLexeme(codeToHighlight.substring(index));\n      } else {\n        language.__emitTokens(codeToHighlight, emitter);\n      }\n\n      emitter.finalize();\n      result = emitter.toHTML();\n\n      return {\n        language: languageName,\n        value: result,\n        relevance,\n        illegal: false,\n        _emitter: emitter,\n        _top: top\n      };\n    } catch (err) {\n      if (err.message && err.message.includes('Illegal')) {\n        return {\n          language: languageName,\n          value: escape(codeToHighlight),\n          illegal: true,\n          relevance: 0,\n          _illegalBy: {\n            message: err.message,\n            index,\n            context: codeToHighlight.slice(index - 100, index + 100),\n            mode: err.mode,\n            resultSoFar: result\n          },\n          _emitter: emitter\n        };\n      } else if (SAFE_MODE) {\n        return {\n          language: languageName,\n          value: escape(codeToHighlight),\n          illegal: false,\n          relevance: 0,\n          errorRaised: err,\n          _emitter: emitter,\n          _top: top\n        };\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * returns a valid highlight result, without actually doing any actual work,\n   * auto highlight starts with this and it's possible for small snippets that\n   * auto-detection may not find a better match\n   * @param {string} code\n   * @returns {HighlightResult}\n   */\n  function justTextHighlightResult(code) {\n    const result = {\n      value: escape(code),\n      illegal: false,\n      relevance: 0,\n      _top: PLAINTEXT_LANGUAGE,\n      _emitter: new options.__emitter(options)\n    };\n    result._emitter.addText(code);\n    return result;\n  }\n\n  /**\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - secondBest (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n    @param {string} code\n    @param {Array<string>} [languageSubset]\n    @returns {AutoHighlightResult}\n  */\n  function highlightAuto(code, languageSubset) {\n    languageSubset = languageSubset || options.languages || Object.keys(languages);\n    const plaintext = justTextHighlightResult(code);\n\n    const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>\n      _highlight(name, code, false)\n    );\n    results.unshift(plaintext); // plaintext is always an option\n\n    const sorted = results.sort((a, b) => {\n      // sort base on relevance\n      if (a.relevance !== b.relevance) return b.relevance - a.relevance;\n\n      // always award the tie to the base language\n      // ie if C++ and Arduino are tied, it's more likely to be C++\n      if (a.language && b.language) {\n        if (getLanguage(a.language).supersetOf === b.language) {\n          return 1;\n        } else if (getLanguage(b.language).supersetOf === a.language) {\n          return -1;\n        }\n      }\n\n      // otherwise say they are equal, which has the effect of sorting on\n      // relevance while preserving the original ordering - which is how ties\n      // have historically been settled, ie the language that comes first always\n      // wins in the case of a tie\n      return 0;\n    });\n\n    const [best, secondBest] = sorted;\n\n    /** @type {AutoHighlightResult} */\n    const result = best;\n    result.secondBest = secondBest;\n\n    return result;\n  }\n\n  /**\n   * Builds new class name for block given the language name\n   *\n   * @param {HTMLElement} element\n   * @param {string} [currentLang]\n   * @param {string} [resultLang]\n   */\n  function updateClassName(element, currentLang, resultLang) {\n    const language = (currentLang && aliases[currentLang]) || resultLang;\n\n    element.classList.add(\"hljs\");\n    element.classList.add(`language-${language}`);\n  }\n\n  /**\n   * Applies highlighting to a DOM node containing code.\n   *\n   * @param {HighlightedHTMLElement} element - the HTML element to highlight\n  */\n  function highlightElement(element) {\n    /** @type HTMLElement */\n    let node = null;\n    const language = blockLanguage(element);\n\n    if (shouldNotHighlight(language)) return;\n\n    fire(\"before:highlightElement\",\n      { el: element, language });\n\n    // we should be all text, no child nodes (unescaped HTML) - this is possibly\n    // an HTML injection attack - it's likely too late if this is already in\n    // production (the code has likely already done its damage by the time\n    // we're seeing it)... but we yell loudly about this so that hopefully it's\n    // more likely to be caught in development before making it to production\n    if (element.children.length > 0) {\n      if (!options.ignoreUnescapedHTML) {\n        console.warn(\"One of your code blocks includes unescaped HTML. This is a potentially serious security risk.\");\n        console.warn(\"https://github.com/highlightjs/highlight.js/wiki/security\");\n        console.warn(\"The element with unescaped HTML:\");\n        console.warn(element);\n      }\n      if (options.throwUnescapedHTML) {\n        const err = new HTMLInjectionError(\n          \"One of your code blocks includes unescaped HTML.\",\n          element.innerHTML\n        );\n        throw err;\n      }\n    }\n\n    node = element;\n    const text = node.textContent;\n    const result = language ? highlight(text, { language, ignoreIllegals: true }) : highlightAuto(text);\n\n    element.innerHTML = result.value;\n    updateClassName(element, language, result.language);\n    element.result = {\n      language: result.language,\n      // TODO: remove with version 11.0\n      re: result.relevance,\n      relevance: result.relevance\n    };\n    if (result.secondBest) {\n      element.secondBest = {\n        language: result.secondBest.language,\n        relevance: result.secondBest.relevance\n      };\n    }\n\n    fire(\"after:highlightElement\", { el: element, result, text });\n  }\n\n  /**\n   * Updates highlight.js global options with the passed options\n   *\n   * @param {Partial<HLJSOptions>} userOptions\n   */\n  function configure(userOptions) {\n    options = inherit(options, userOptions);\n  }\n\n  // TODO: remove v12, deprecated\n  const initHighlighting = () => {\n    highlightAll();\n    deprecated(\"10.6.0\", \"initHighlighting() deprecated.  Use highlightAll() now.\");\n  };\n\n  // TODO: remove v12, deprecated\n  function initHighlightingOnLoad() {\n    highlightAll();\n    deprecated(\"10.6.0\", \"initHighlightingOnLoad() deprecated.  Use highlightAll() now.\");\n  }\n\n  let wantsHighlight = false;\n\n  /**\n   * auto-highlights all pre>code elements on the page\n   */\n  function highlightAll() {\n    // if we are called too early in the loading process\n    if (document.readyState === \"loading\") {\n      wantsHighlight = true;\n      return;\n    }\n\n    const blocks = document.querySelectorAll(options.cssSelector);\n    blocks.forEach(highlightElement);\n  }\n\n  function boot() {\n    // if a highlight was requested before DOM was loaded, do now\n    if (wantsHighlight) highlightAll();\n  }\n\n  // make sure we are in the browser environment\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('DOMContentLoaded', boot, false);\n  }\n\n  /**\n   * Register a language grammar module\n   *\n   * @param {string} languageName\n   * @param {LanguageFn} languageDefinition\n   */\n  function registerLanguage(languageName, languageDefinition) {\n    let lang = null;\n    try {\n      lang = languageDefinition(hljs);\n    } catch (error$1) {\n      error(\"Language definition for '{}' could not be registered.\".replace(\"{}\", languageName));\n      // hard or soft error\n      if (!SAFE_MODE) { throw error$1; } else { error(error$1); }\n      // languages that have serious errors are replaced with essentially a\n      // \"plaintext\" stand-in so that the code blocks will still get normal\n      // css classes applied to them - and one bad language won't break the\n      // entire highlighter\n      lang = PLAINTEXT_LANGUAGE;\n    }\n    // give it a temporary name if it doesn't have one in the meta-data\n    if (!lang.name) lang.name = languageName;\n    languages[languageName] = lang;\n    lang.rawDefinition = languageDefinition.bind(null, hljs);\n\n    if (lang.aliases) {\n      registerAliases(lang.aliases, { languageName });\n    }\n  }\n\n  /**\n   * Remove a language grammar module\n   *\n   * @param {string} languageName\n   */\n  function unregisterLanguage(languageName) {\n    delete languages[languageName];\n    for (const alias of Object.keys(aliases)) {\n      if (aliases[alias] === languageName) {\n        delete aliases[alias];\n      }\n    }\n  }\n\n  /**\n   * @returns {string[]} List of language internal names\n   */\n  function listLanguages() {\n    return Object.keys(languages);\n  }\n\n  /**\n   * @param {string} name - name of the language to retrieve\n   * @returns {Language | undefined}\n   */\n  function getLanguage(name) {\n    name = (name || '').toLowerCase();\n    return languages[name] || languages[aliases[name]];\n  }\n\n  /**\n   *\n   * @param {string|string[]} aliasList - single alias or list of aliases\n   * @param {{languageName: string}} opts\n   */\n  function registerAliases(aliasList, { languageName }) {\n    if (typeof aliasList === 'string') {\n      aliasList = [aliasList];\n    }\n    aliasList.forEach(alias => { aliases[alias.toLowerCase()] = languageName; });\n  }\n\n  /**\n   * Determines if a given language has auto-detection enabled\n   * @param {string} name - name of the language\n   */\n  function autoDetection(name) {\n    const lang = getLanguage(name);\n    return lang && !lang.disableAutodetect;\n  }\n\n  /**\n   * Upgrades the old highlightBlock plugins to the new\n   * highlightElement API\n   * @param {HLJSPlugin} plugin\n   */\n  function upgradePluginAPI(plugin) {\n    // TODO: remove with v12\n    if (plugin[\"before:highlightBlock\"] && !plugin[\"before:highlightElement\"]) {\n      plugin[\"before:highlightElement\"] = (data) => {\n        plugin[\"before:highlightBlock\"](\n          Object.assign({ block: data.el }, data)\n        );\n      };\n    }\n    if (plugin[\"after:highlightBlock\"] && !plugin[\"after:highlightElement\"]) {\n      plugin[\"after:highlightElement\"] = (data) => {\n        plugin[\"after:highlightBlock\"](\n          Object.assign({ block: data.el }, data)\n        );\n      };\n    }\n  }\n\n  /**\n   * @param {HLJSPlugin} plugin\n   */\n  function addPlugin(plugin) {\n    upgradePluginAPI(plugin);\n    plugins.push(plugin);\n  }\n\n  /**\n   * @param {HLJSPlugin} plugin\n   */\n  function removePlugin(plugin) {\n    const index = plugins.indexOf(plugin);\n    if (index !== -1) {\n      plugins.splice(index, 1);\n    }\n  }\n\n  /**\n   *\n   * @param {PluginEvent} event\n   * @param {any} args\n   */\n  function fire(event, args) {\n    const cb = event;\n    plugins.forEach(function(plugin) {\n      if (plugin[cb]) {\n        plugin[cb](args);\n      }\n    });\n  }\n\n  /**\n   * DEPRECATED\n   * @param {HighlightedHTMLElement} el\n   */\n  function deprecateHighlightBlock(el) {\n    deprecated(\"10.7.0\", \"highlightBlock will be removed entirely in v12.0\");\n    deprecated(\"10.7.0\", \"Please use highlightElement now.\");\n\n    return highlightElement(el);\n  }\n\n  /* Interface definition */\n  Object.assign(hljs, {\n    highlight,\n    highlightAuto,\n    highlightAll,\n    highlightElement,\n    // TODO: Remove with v12 API\n    highlightBlock: deprecateHighlightBlock,\n    configure,\n    initHighlighting,\n    initHighlightingOnLoad,\n    registerLanguage,\n    unregisterLanguage,\n    listLanguages,\n    getLanguage,\n    registerAliases,\n    autoDetection,\n    inherit,\n    addPlugin,\n    removePlugin\n  });\n\n  hljs.debugMode = function() { SAFE_MODE = false; };\n  hljs.safeMode = function() { SAFE_MODE = true; };\n  hljs.versionString = version;\n\n  hljs.regex = {\n    concat: concat,\n    lookahead: lookahead,\n    either: either,\n    optional: optional,\n    anyNumberOfTimes: anyNumberOfTimes\n  };\n\n  for (const key in MODES) {\n    // @ts-ignore\n    if (typeof MODES[key] === \"object\") {\n      // @ts-ignore\n      deepFreeze(MODES[key]);\n    }\n  }\n\n  // merge all the modes/regexes into our main object\n  Object.assign(hljs, MODES);\n\n  return hljs;\n};\n\n// Other names for the variable may break build script\nconst highlight = HLJS({});\n\n// returns a new instance of the highlighter to be used for extensions\n// check https://github.com/wooorm/lowlight/issues/47\nhighlight.newInstance = () => HLJS({});\n\nmodule.exports = highlight;\nhighlight.HighlightJS = highlight;\nhighlight.default = highlight;\n"],"names":["IDENT_RE","KEYWORDS","LITERALS","TYPES","ERROR_TYPES","BUILT_IN_GLOBALS","BUILT_IN_VARIABLES","BUILT_INS","concat","javascript","hljs","regex","hasClosingTag","match","_ref","after","tag","slice","pos","input","indexOf","IDENT_RE$1","FRAGMENT","begin","end","XML_SELF_CLOSING","XML_TAG","isTrulyOpeningTag","response","afterMatchIndex","length","index","nextChar","ignoreMatch","m","afterMatch","substring","KEYWORDS$1","$pattern","keyword","literal","built_in","decimalDigits","frac","decimalInteger","NUMBER","className","variants","relevance","SUBST","keywords","contains","HTML_TEMPLATE","starts","returnEnd","BACKSLASH_ESCAPE","subLanguage","CSS_TEMPLATE","GRAPHQL_TEMPLATE","TEMPLATE_STRING","JSDOC_COMMENT","COMMENT","excludeEnd","excludeBegin","endsParent","C_BLOCK_COMMENT_MODE","C_LINE_COMMENT_MODE","SUBST_INTERNALS","APOS_STRING_MODE","QUOTE_STRING_MODE","SUBST_AND_COMMENTS","PARAMS_CONTAINS","PARAMS","CLASS_OR_EXTENDS","scope","CLASS_REFERENCE","either","_","USE_STRICT","label","FUNCTION_DEFINITION","illegal","UPPER_CASE_CONSTANT","noneOf","list","join","FUNCTION_CALL","lookahead","PROPERTY_ACCESS","GETTER_OR_SETTER","FUNC_LEAD_IN_RE","UNDERSCORE_IDENT_RE","FUNCTION_VARIABLE","name","aliases","exports","SHEBANG","binary","RE_STARTERS_RE","REGEXP_MODE","returnBegin","skip","beginKeywords","inherit","TITLE_MODE","Build","setup","registerLanguage","useRoute","onMounted","highlightAll","_createVNode","_createTextVNode","deepFreeze","obj","Map","clear","delete","set","Error","Set","add","Object","freeze","getOwnPropertyNames","forEach","prop","type","isFrozen","Response","constructor","mode","undefined","data","this","isMatchIgnored","escapeHTML","value","replace","inherit$1","original","result","create","key","_len","arguments","objects","Array","_key","SPAN_CLOSE","emitsWrappingTags","node","scopeToCSSClass","prefix","startsWith","includes","pieces","split","shift","map","x","i","repeat","HTMLRenderer","parseTree","options","buffer","classPrefix","walk","addText","text","openNode","span","closeNode","newNode","opts","children","assign","TokenTree","rootNode","stack","top","root","push","pop","closeAllNodes","toJSON","JSON","stringify","builder","_walk","child","_collapse","every","el","TokenTreeEmitter","super","startScope","endScope","__addSublanguage","emitter","toHTML","renderer","finalize","source","re","anyNumberOfTimes","optional","_len2","args","_key2","joined","stripOptionsFromArgs","splice","_len3","_key3","capture","countMatchGroups","RegExp","toString","exec","lexeme","BACKREF_RE","_rewriteBackreferences","regexps","_ref2","joinWith","numCaptures","offset","out","String","Number","MATCH_NOTHING_RE","NUMBER_RE","C_NUMBER_RE","BINARY_NUMBER_RE","beginShebang","on:begin","resp","PHRASAL_WORDS_MODE","modeOptions","ENGLISH_WORD","HASH_COMMENT_MODE","NUMBER_MODE","C_NUMBER_MODE","BINARY_NUMBER_MODE","UNDERSCORE_TITLE_MODE","METHOD_GUARD","END_SAME_AS_BEGIN","_beginMatch","on:end","MODES","__proto__","skipIfHasPrecedingDot","before","scopeClassName","_parent","parent","__beforeBegin","compileIllegal","isArray","compileMatch","compileRelevance","beforeMatchExt","beforeMatch","originalMode","keys","COMMON_KEYWORDS","DEFAULT_KEYWORD_SCOPE","compileKeywords","rawKeywords","caseInsensitive","scopeName","compiledKeywords","compileList","keywordList","toLowerCase","pair","scoreForKeyword","providedScore","commonKeyword","seenDeprecations","error","message","console","warn","_len4","_key4","log","deprecated","version","MultiClassError","remapScopeNames","regexes","_ref3","scopeNames","emit","positions","_emit","_multi","beginMultiClass","beginScope","endMultiClass","scopeSugar","MultiClass","_wrap","compileLanguage","language","langRe","global","case_insensitive","unicodeRegex","MultiRegex","matchIndexes","matchAt","position","addRule","compile","terminators","matcherRe","lastIndex","s","findIndex","matchData","ResumableMultiRegex","rules","multiRegexes","count","regexIndex","getMatcher","matcher","_ref4","resumingScanAtSamePosition","considerAll","m2","buildModeRegex","mm","term","rule","terminatorEnd","compileMode","cmode","isCompiled","ext","compilerExtensions","keywordPattern","keywordPatternRe","beginRe","endsWithParent","endRe","illegalRe","c","expandOrCloneMode","classNameAliases","dependencyOnParent","cachedVariants","variant","HTMLInjectionError","reason","html","escape","NO_MATCH","Symbol","MAX_KEYWORD_HITS","HLJS","languages","plugins","SAFE_MODE","LANGUAGE_NOT_FOUND","PLAINTEXT_LANGUAGE","disableAutodetect","ignoreUnescapedHTML","throwUnescapedHTML","noHighlightRe","languageDetectRe","cssSelector","__emitter","shouldNotHighlight","languageName","test","blockLanguage","block","classes","parentNode","getLanguage","find","_class","highlight","codeOrLanguageName","optionsOrCode","ignoreIllegals","code","context","fire","_highlight","codeToHighlight","continuation","keywordHits","keywordData","matchText","processKeywords","modeBuffer","buf","word","kind","keywordRelevance","cssClass","emitKeyword","processSubLanguage","continuations","_top","highlightAuto","_emitter","processBuffer","emitMultiClass","max","klass","startNewMode","endOfMode","matchPlusRemainder","matched","doIgnore","resumeScanAtSamePosition","doBeginMatch","newMode","beforeCallbacks","cb","doEndMatch","endMode","origin","processContinuations","current","unshift","item","lastMatch","processLexeme","textBeforeMatch","err","badRule","processed","iterations","md","__emitTokens","processedCount","_illegalBy","resultSoFar","errorRaised","justTextHighlightResult","languageSubset","plaintext","results","filter","autoDetection","sorted","sort","a","b","supersetOf","best","secondBest","updateClassName","element","currentLang","resultLang","classList","highlightElement","innerHTML","textContent","configure","userOptions","initHighlighting","initHighlightingOnLoad","wantsHighlight","document","readyState","blocks","querySelectorAll","boot","languageDefinition","lang","error$1","rawDefinition","bind","registerAliases","unregisterLanguage","alias","listLanguages","aliasList","_ref5","upgradePluginAPI","plugin","addPlugin","removePlugin","event","deprecateHighlightBlock","window","addEventListener","highlightBlock","debugMode","safeMode","versionString","newInstance","module","HighlightJS","default"],"sourceRoot":""}