{"version":3,"file":"js/165.257116fb.js","mappings":"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","sources":["webpack://my-website/./src/pages/summary/hp/html2.jsx"],"sourcesContent":["import \".././common/css/html.less\";\nconst Html2 = {\n  setup() {\n    return () => (\n      <div>\n        <h1>生成HTTP请求消息</h1>\n        <div className=\"web-content\">\n          <h3>概述</h3>\n          <p>\n            对URL进行解析之后，浏览器确定了Web服务器和文件名，接下来就是根据这些信息来生成HTTP请求消息了。实际上，HTTP消息在格式上是有严格规定的，\n            因此浏览器会按照规定的格式来生成请求消息。\n          </p>\n          <br />\n          <p>\n            首先，请求消息的第一行称为请求行。请求方法可以告诉Web服务器它应该进行怎样的操作。\n            写好方法之后，加一个空格，然后写URI。URI部分格式如下，一般是文件和程序的路径名。\n          </p>\n          <br />\n          <code>\n            <i>{\"/<目录名>/.../<文件名>\"}</i>\n          </code>\n          <p>\n            路径名一般来说已经包含在URL中了，因此只要从URL中提取出来原封不动地写上去就好了。\n          </p>\n          <br />\n          <p>\n            第一行的末尾需要写撒花姑娘HTTP的版本号，这是为了标识该消息是基于哪有版本的HTTP规格编写的。到此为止，第一行就结束了。\n          </p>\n          <br />\n          <p>\n            第一行开始为消息头。消息头的功能是用来存放额外的详细信息。如：日期、客户端支持的数据类型、语言、压缩格式、客户端和服务器的软件名称和版本\n            、数据有效期和最后更新时间等。\n          </p>\n          <br />\n          <p>\n            写完消息头之后，还需要添加一个完全没有内容的空行，然后写上需要发送的数据。这一部分称为消息体，也就是消息的主体。不过，在使用GET方法\n            的情况下，仅凭方法和URL，Web服务器就能判断需要进行怎样的操作，因此消息体中不需要填写任何数据。消息体结束之后，整个消息也就结束了。\n          </p>\n          <br />\n          <p>\n            当使用POST方法时，需要将表单中填写的信息写在消息中。到此为止，请求消息的生成操作就全部完成了。\n          </p>\n          <div class=\"tip custom-block\">\n            <p class=\"custom-block-title\">GET和POST的区别</p>\n            <div style={{ margin: \"25px\" }}>\n              <strong>1. 协议层面</strong>\n              <p>\n                访问方法，表示客户端要干嘛，Get表示要拿东西，Post表示要提交东西\n              </p>\n              <strong>2. 应用层面</strong>\n              <p>\n                Get请求体为空，请求头结束换行，请求体留空。 Post请求体不为空\n              </p>\n              <strong>1. 浏览器层面</strong>\n              <p>get请求发送数据量有限，get有历史记录，post没有历史记录</p>\n            </div>\n          </div>\n          <h3>收到响应</h3>\n          <p>\n            在响应消息中，第一行的内容为状态码和响应短语，用来表示请求的执行结果是成功还是出错。状态码和响应短语表示的内容一致，但他们的用途不同。状态是一个数字，它主要用来\n            向程序告知执行结果；相对地，响应短语则是一段文字，用来向人们告知执行的结果。\n          </p>\n          <div class=\"tip custom-block\">\n            <p class=\"custom-block-title\">HTTP状态码概要</p>\n            <div className=\"table_container\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>状态码</th>\n                    <th>含义</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>1xx</td>\n                    <td>告知请求的处理进度和情况</td>\n                  </tr>\n                  <tr>\n                    <td>2xx</td>\n                    <td>成功</td>\n                  </tr>\n                  <tr>\n                    <td>3xx</td>\n                    <td>表示需要进一步操作</td>\n                  </tr>\n                  <tr>\n                    <td>4xx</td>\n                    <td>客户端错误</td>\n                  </tr>\n                  <tr>\n                    <td>5xx</td>\n                    <td>服务器错误</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n        <h1>DNS服务器查询Web服务器的IP地址</h1>\n        <div className=\"web-content\">\n          <h3>IP地址</h3>\n          <p>\n            在网络中，所有设备都会被分配一个地址。这个地址就相当于现实中某条路上的\"xx号xx室\"。其中\n            \"号\" 对应的号码是分配给整个子网的，而 \"室\"\n            对应的号码是分配给子网中的计算机的，这就是网络中的地址。\"号\"\n            对应的号码称为网络号， \"室\"\n            对应的号码称为主机号，这个地址的整体称为IP地址。\n            通过IP地址我们可以判断出访问对象服务器的位置，从而发送消息到服务器。\n          </p>\n          <h3>子网掩码</h3>\n          <p>\n            通过使用子网掩码，可以确定IP地址中的网络号和主机号的范围。子网掩码中的网络位指示网络号的部分，而主机位指示主机号的部分。根据子网掩码的设置，最高比特位设置为1的表示网络位，最低比特位设置为0的表示主机位。\n          </p>\n          <p>\n            例如，假设有一个IP地址为192.168.1.10，子网掩码为255.255.255.0的情况。在这种情况下，192.168.1\n            是网络号，10\n            是主机号。这个IP地址属于以192.168.1为网络号的网络，并且标识该网络中的第10台主机。\n          </p>\n          <p>\n            分离网络号和主机号对于路由器和交换机等网络设备至关重要，因为它们需要根据网络号来决定如何转发数据包。同时，主机号用于在特定网络中标识和定位主机。\n          </p>\n          <div class=\"tip custom-block\">\n            <p class=\"custom-block-title\">网络号与子网掩码</p>\n            <div style={{ margin: \"10px\" }}>\n              <p>\n                网络号是指用于标识网络的一部分IP地址。它是在网络层中使用的一部分，用于在网络中定位和识别不同的网络。网络号可以视为一个网络的身份证，用于区分不同的网络。\n              </p>\n              <p>\n                主机号是指在特定网络中标识主机（计算机、设备）的一部分IP地址。主机号用于在特定网络中唯一标识一个主机。它可以看作是一个网络中的个体身份证，用于在该网络中区分不同的主机。\n              </p>\n            </div>\n          </div>\n          <h3>提供查询IP地址的功能——Socket库</h3>\n          <p>让我们把向Web服务器发送请求消息的事情放一放，先来探索一下DNS。</p>\n          <p>\n            向DNS服务器发出查询，也就是向DNS服务器发送查询消息，并接收服务器返回的响应消息。换句话说，对于DNS服务器，我们的计算机上一定有相应的DNS客户端，而相当于\n            DNS客户端部分称为DNS解析器。通过DNS查询IP地址的操作称为域名解析，因此负责执行解析这一操作的就叫解析器了。\n          </p>\n          <p>\n            解析器是包含在Socket库中的一段C语言程序，它是其中一种程序组件。通过下面这样对解析器的调用，就完成了查询IP地址的操作。\n          </p>\n          <br />\n\n          <div>\n            <code>{\"<内存地址> = gethotbyname('www.lab.glasscom.com')\"};</code>\n          </div>\n          <br />\n          <p>运行这一行程序后，服务器IP地址会被写入指定的内存地址中</p>\n          <h3>解析器原理</h3>\n          <p>\n            一般来说，网络程序(这里指浏览器)调用解析器时程序的控制流程就会转移到解析器内部。当程序控制流程转移时，应用程序本身的工作就会暂停。\n            然后解析器也要生成发送消息的请求头，，并发送给DNS服务器，在这里，通过调用操作系统的协议栈，控制流程又会再次转移，协议栈会执行发送消息的操作，然后通过网卡\n            将消息发送给DNS服务器。\n          </p>\n          <div class=\"tip custom-block\">\n            <p class=\"custom-block-title\">TIPS</p>\n            <div style={{ margin: \"10px\" }}>\n              <p>\n                向DNS服务器发送消息时，我们当然也要知道DNSF服务器的IP地址.只不过这个IP地址是作为TCP/IP的一个设置项目实现设置好的，不需要再去查询了。\n              </p>\n            </div>\n          </div>\n        </div>\n        <h1>委托协议栈发送消息</h1>\n        <div className=\"web-content\">\n          <h3>数据收发操作概览</h3>\n          <p>\n            <strong>\n              向操作系统内部的协议栈发出委托时，需要按照指定的顺序来调用Socket库中的程序组件\n            </strong>\n          </p>\n          <p>\n            简单来说，收发数据的两台计算机之间连接了一条数据通道，数据沿着这条通道流动，最终到达目的地。\n          </p>\n          <p>\n            在进行收发数据操作之前，双方需要先建立起这条管道。建立管道的关键在于管道两段的数据出入口，这些出入口称为\n            <code style={{ width: \"9%\" }}>套接字</code>。\n            首先，服务器一方先创建套接字，然后等待客户端向该套接字连接管道。当服务器进入等待状态时，客户端就可以连接管道了。\n            接下来就像我们刚刚讲过的一样，只要将数据送入套接字就可以收发数据了。\n          </p>\n          <p>\n            当数据发送完毕后，管道会被断开，断开可以由任意一方发起。管道断开后，套接字也会被删除。\n          </p>\n          <br />\n          <p>综上所述，收发数据的操作氛围若干阶段，大致总结为一下4个</p>\n          <br />\n          <p>\n            <span>(1)创建套接字(创建套接字阶段)</span>\n            <span>(2)将管道连接到服务器端的套接字上(连接阶段)</span>\n            <span>(3)收发数据(通信阶段)</span>\n            <span>(4)断开管道并删除套接字(断开阶段)</span>\n          </p>\n          <p>以上四个阶段都是委托协议栈来完成的</p>\n        </div>\n        <div className=\"web-content\">\n          <h3>创建套接字阶段</h3>\n          <p>\n            <strong>\n              套接字创建阶段，只要调用Socket库中的socket程序组件。\n            </strong>\n          </p>\n          <p>\n            套接字创建完成后，协议栈会返回一个描述符，描述符是用来识别不同的套接字的。\n          </p>\n        </div>\n        <div className=\"web-content\">\n          <h3>连接阶段：把管道接上去</h3>\n          <p>\n            <strong>\n              接下来，我们需要委托协议栈将客户端创建的套接字与服务器哪边的套接字连接起来。\n            </strong>\n          </p>\n          <p>\n            应用程序通过调用Scoket库中名为connect的程序组件来完成这一操作。\n            这里需要指定描述符、服务器IP地址和端口号这3个参数。\n          </p>\n          <div class=\"tip custom-block\">\n            <p class=\"custom-block-title\">TIPS</p>\n            <div style={{ margin: \"10px\" }}>\n              <p>\n                <strong>描述符:</strong>应用程序用来识别套接字的机制\n              </p>\n              <p>\n                <strong>IP地址和端口号:</strong>\n                客户端和服务器之间用来识别对方套接字的机制\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"web-content\">\n          <h3>通信阶段：传递消息</h3>\n          <p>\n            <strong>\n              套接字连接起来后，会进行数据的发送的操作。这里是通过调用Socket的write程序组件来完成的。\n            </strong>\n          </p>\n          <br />\n          <p>\n            首先，应用程序需要在内存中准备好要发送的数据。根据用户输入的网址来生成的HTTP请求消息就是我们要发送的数据。\n            接下来，当调用write时，需要指定描述符和发送数据，然后协议栈就会将数据发送到服务器。\n          </p>\n          <p>\n            当消息返回后，需要执行的是接收消息的操作。接收消息是通过调用read程序组件委托协议栈来完成的。调用\n            read时需要指定存放接收消息到的响应消息的内存地址，这一内存地址称为\n            <strong>接收缓冲区</strong>\n          </p>\n        </div>\n        <div className=\"web-content\">\n          <h3>断开阶段：收发数据结束</h3>\n          <p>\n            <strong>到了断开阶段，需要调用close程序组件进入断开阶段。</strong>\n          </p>\n          <div class=\"tip custom-block\">\n            <p class=\"custom-block-title\">TIPS</p>\n            <div style={{ margin: \"10px\" }}>\n              <p>\n                如果一个网页中包含很多张图片，就必须重复进行很多次连接、收发数据、断开操作。对于\n                同一台服务器来说，重复连接和断开显然是效率很低的，因此后来人们又设计出了能够在一次连接中收发多个请求和响应的方法。\n                在HTTP版本1.1中就可以使用这种方法。\n              </p>\n              <br />\n              <p>\n                <strong>HTTP1.1解决了HTTP时代最重要的两大问题</strong>\n                <span>\n                  1.TCP连接无法复用，每次请求都需要重新建立TCP通道，这就需要重复进行三次握手和四次挥手，也就是说每个TCP连接只能发送一个请求\n                </span>\n                <span>\n                  2.队头阻塞，每个请求都要过 \"独木桥\"\n                  ，桥宽为一个请求的宽度，也就是说，即使多个请求并行发出，也只能一个接一个地进行排队{\" \"}\n                </span>\n              </p>\n              <br />\n              <p>\n                <strong>HTTP1引入了长链接和管线化</strong>\n              </p>\n              <p>\n                <span>\n                  1.长链接：HTTP1.1支持长连接，且默认开启Connection：keep-alive，这样在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的小号和延迟。\n                </span>\n                <span>\n                  2.管线化：当浏览器同时发出多个HTIP请求时，浏览器无需等待上一个请求返回结果，即可处理其他请求。\n                </span>\n                注意:\n                管线化只是可以使浏览器并行发出请求，并没有从根本上解决队头阻塞的问题，因为对请求的响应仍然要遵循先进先出的原则。\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  },\n};\nexport default Html2;\n"],"names":["Html2","setup","_createVNode","_createTextVNode","margin","width"],"sourceRoot":""}