{"version":3,"file":"js/569.8548c539.js","mappings":"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","sources":["webpack://my-website/./src/pages/summary/hp/html1.jsx"],"sourcesContent":["import styles from \".././common/css/html.less\";\nimport tcpimg from \"./img/tcp.png\";\nconst Html1 = {\n  setup() {\n    return () => (\n      <div class={\"hp-container\"}>\n        <h1>HTTP</h1>\n        <div class=\"web-content\">\n          <h3>含义示例</h3>\n          <p>\n            &nbsp;&nbsp; HTTP（Hypertext Transfer\n            Protocol）是一种用于传输超文本的协议,用来在客户端和服务器之间传输数据。前端开发人员需要了解HTTP请求和响应的基本原理、常见的请求方法（GET、POST等）以及状态码的含义。\n          </p>\n          <br />\n          <p>\n            它是一种被广泛应用在浏览器客户端中的应用层协议，它定义了客户端与服务端之间进行数据交互的一组规则，在和服务端建立连接后，通过携带请求消息，请求体发送数据请求。\n          </p>\n          <br />\n          <p>\n            &nbsp;&nbsp;&nbsp;我们通常是使用浏览器通过输入http协议的URL来访问\n            Web 服务器，事实上，浏览器并不只有这一个功能，它也可以用来在\n            FTP服务器上下载和上传文件，同时也具备电子邮件客户端的功能。可以说，浏览器是一个具备多种客户端功能的综合性客户端软件，因此它需要\n            一些东西来判断应该使用其中哪种功能来访问相应的数据，而各种不同的 URL\n            就是用来干这个的，比如访问 Web\n            服务器时用“http:”，而访问FTP服务器时用“ftp:”\n          </p>\n        </div>\n        <h1>URL</h1>\n        <div className=\"web-content\">\n          <h3>含义示例</h3>\n          <p>&nbsp;&nbsp; 我们先从浏览器输入网址到页面展示内容谈起。</p>\n          <br />\n          <p>\n            让我们来介绍一下网址。网址，准确来说应该叫URL(统一资源定位符),是用于标识和定位网络上资源的地址,它以http://开头，除了http，还有其他类型的网址，例如\n            \"ftp\",\"file\",\"maito\"等。\n            一般的话，一个完整的URL包括4个部分：协议类型(访问方法)、域名、端口号(可省略)、服务器目录文件路径；以百度网址为例：\n          </p>\n          <br />\n          <code>\n            <i>http://www.baidu.com:80/dir/file.html</i>\n          </code>\n          <br />\n          <p>\n            这表示要访问百度web服务器上路径名wei/dir/file.html的文件，也就是位于/dir/目录下的file.html这个文件\n          </p>\n        </div>\n        <h1>DNS</h1>\n        <div className=\"web-content\">\n          <h3>含义示例</h3>\n          <p>\n            DNS(Domain Name\n            System),域名服务系统。将服务器名称和IP地址进行关联是DNS最常见的用法，但DNS的功能并不仅限于此，他还可以将邮件地址和邮件服务器进关联，以及为各种信息关联相印的名称\n          </p>\n        </div>\n        <h1>TCP/IP</h1>\n        <div className=\"web-content\">\n          <h3>IP地址基本知识</h3>\n          <p>\n            &nbsp;&nbsp;&nbsp;http请求服务器数据时会生成htttp消息，然后需要委托操作系统将消息发送给web服务器，尽管浏览器能够解析网址并生成HTTP消息，但它本身并不具备将消息发送到网络中的功能，\n            因此这一功能需要委托操作系统来实现。在进行这一操作时，我们还有一个工作需要完成，那就是查询网址中服务器域名对应的IP地址。在委托操作系统发送消息时，必需要提供的不是通信对象的域名，\n            而是它的IP地址。因此因此在生成HTTP消息之后，下一个步骤就是根据域名查询IP地址。在讲解这一操作之前，让我们先来简单了解一下IP地址。\n          </p>\n          <p>\n            互联网和公司内部的局域网都是基于TCP/IP的思路来设计的，所以我们先来了解TCP/IP的基本思路。\n          </p>\n          <br />\n          <p>\n            &nbsp;&nbsp;TCP/IP结构如图所示，就是有一些小的子网，通过路由器连接起来组成一个大的网络。\n            这里的子网可以理解为用集线器连接起来的几台计算机。\n          </p>\n          <img className=\"tcpimg\" src={tcpimg} alt=\"\" />\n        </div>\n        <h1>跨域请求</h1>\n        <div className=\"web-content\">\n          <h3>概述</h3>\n          <p>\n            在 HTML 中，\n            <code>{\"<a>, <form>, <img>, <script>, <iframe>, <link>\"}</code>{\" \"}\n            等标签以及 Ajax\n            都可以指向一个资源地址，跨域请求就是指：当前发起请求的域与该请求指向的资源所在的域不一样，凡是发送请求的url的\n            协议、域名、端口号三者之间任意一者与当前页面地址不同的请求。这里的域指的是这样的一个概念：我们认为若协议\n            + 域名 + 端口号均相同，那么就是同域\n          </p>\n          <p>\n            举个例子：假如一个域名为aaa.cn的网站，它发起一个资源路径为aaa.cn/books/getBookInfo的\n            Ajax\n            请求，那么这个请求是同域的，因为资源路径的协议、域名以及端口号与当前域一致（例子中协议名默认为http，端口号默认为80）。但是，如果发起一个资源路径为bbb.com/pay/purchase的\n            Ajax\n            请求，那么这个请求就是跨域请求，因为域不一致，与此同时由于安全问题，这种请求会受到同源策略限制。\n          </p>\n        </div>\n        <h1>网络安全</h1>\n        <div className=\"web-content\">\n          <h3>跨域请求的安全问题</h3>\n          <p>\n            通常，浏览器会对上面提到的跨域请求作出限制。浏览器之所以要对跨域请求作出限制，是出于安全方面的考虑，因为跨域请求有可能被不法分子利用来发动\n            CSRF攻击。\n          </p>\n          <p>CSRF攻击：</p>\n          <p>\n            CSRF（Cross-site request\n            forgery），中文名称：跨站请求伪造，也被称为：one click\n            attack/session\n            riding，缩写为：CSRF/XSRF。CSRF攻击者在用户已经登录目标网站之后，诱使用户访问一个攻击页面，利用目标网站对用户的信任，以用户身份在攻击页面对目标网站发起伪造用户操作的请求，达到攻击目的。\n            CSRF\n            攻击的原理大致描述如下：有两个网站，其中A网站是真实受信任的网站，而B网站是危险网站。在用户登陆了受信任的A网站是，本地会存储A网站相关的Cookie，并且浏览器也维护这一个Session会话。这时，如果用户在没有登出A网站的情况下访问危险网站B，那么危险网站B就可以模拟发出一个对A网站的请求（跨域请求）对A网站进行操作，而在A网站的角度来看是并不知道请求是由B网站发出来的（Session和Cookie均为A网站的），这时便成功发动一次CSRF\n            攻击。\n          </p>\n          <br />\n          <p>\n            因而 CSRF\n            攻击可以简单理解为：攻击者盗用了你的身份，以你的名义发送而已请求。CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账......造成的问题包括：个人隐私泄露以及财产安全。\n          </p>\n          <br />\n          <p>\n            因此，大多数浏览器都会跨域请求作出限制，这是从浏览器层面上的对 CSRF\n            攻击的一种防御，但是需要注意的是在复杂的网络环境中借助浏览器来防御\n            CSRF\n            攻击并不足够，还需要从服务端或者客户端方面入手防御。详细可以参考这篇文章浅谈CSRF攻击方式\n          </p>\n          <h3>同源策略</h3>\n          <p>\n            <span>1. 同源策略是 Netscape 提出的一个著名的安全策略</span>\n\n            <span>2. 同源策略是浏览器最核心最基础的安全策略</span>\n\n            <span>3. 现在所有的可支持 Javascript 的浏览器都会使用这个策略</span>\n\n            <span>\n              4.\n              web构建在同源策略基础之上，浏览器对非同源脚本的限制措施是对同源策略的具体实现\n            </span>\n          </p>\n        </div>\n      </div>\n    );\n  },\n};\nexport default Html1;\n"],"names":["Html1","setup","_createVNode","_createTextVNode","tcpimg"],"sourceRoot":""}